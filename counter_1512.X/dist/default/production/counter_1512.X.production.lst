

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Oct 17 02:29:06 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1512
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	psect	text27,local,class=CODE,merge=1,delta=2
    38                           	psect	text28,local,class=CODE,merge=1,delta=2
    39                           	psect	text29,local,class=CODE,merge=1,delta=2
    40                           	psect	text30,local,class=CODE,merge=1,delta=2
    41                           	psect	text31,local,class=CODE,merge=1,delta=2
    42                           	psect	text32,local,class=CODE,merge=1,delta=2
    43                           	psect	text33,local,class=CODE,merge=1,delta=2
    44                           	psect	text34,local,class=CODE,merge=1,delta=2
    45                           	psect	text35,local,class=CODE,merge=1,delta=2
    46                           	psect	intentry,global,class=CODE,delta=2
    47                           	psect	text37,local,class=CODE,merge=1,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     
    50                           ; Version 2.05
    51                           ; Generated 20/12/2018 GMT
    52                           ; 
    53                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC16F1512 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     	;# 
    85  0001                     	;# 
    86  0002                     	;# 
    87  0003                     	;# 
    88  0004                     	;# 
    89  0005                     	;# 
    90  0006                     	;# 
    91  0007                     	;# 
    92  0008                     	;# 
    93  0009                     	;# 
    94  000A                     	;# 
    95  000B                     	;# 
    96  000C                     	;# 
    97  000D                     	;# 
    98  000E                     	;# 
    99  0010                     	;# 
   100  0011                     	;# 
   101  0012                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  008C                     	;# 
   112  008D                     	;# 
   113  008E                     	;# 
   114  0090                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0095                     	;# 
   118  0096                     	;# 
   119  0097                     	;# 
   120  0099                     	;# 
   121  009A                     	;# 
   122  009B                     	;# 
   123  009B                     	;# 
   124  009B                     	;# 
   125  009B                     	;# 
   126  009C                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009E                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  0116                     	;# 
   134  0117                     	;# 
   135  011D                     	;# 
   136  018C                     	;# 
   137  018D                     	;# 
   138  018E                     	;# 
   139  0191                     	;# 
   140  0191                     	;# 
   141  0192                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0194                     	;# 
   145  0195                     	;# 
   146  0196                     	;# 
   147  0197                     	;# 
   148  0199                     	;# 
   149  019A                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019B                     	;# 
   154  019C                     	;# 
   155  019C                     	;# 
   156  019D                     	;# 
   157  019E                     	;# 
   158  019F                     	;# 
   159  020D                     	;# 
   160  0210                     	;# 
   161  0211                     	;# 
   162  0211                     	;# 
   163  0212                     	;# 
   164  0212                     	;# 
   165  0213                     	;# 
   166  0213                     	;# 
   167  0214                     	;# 
   168  0214                     	;# 
   169  0215                     	;# 
   170  0215                     	;# 
   171  0215                     	;# 
   172  0216                     	;# 
   173  0216                     	;# 
   174  0217                     	;# 
   175  0217                     	;# 
   176  0291                     	;# 
   177  0291                     	;# 
   178  0292                     	;# 
   179  0293                     	;# 
   180  0298                     	;# 
   181  0298                     	;# 
   182  0299                     	;# 
   183  029A                     	;# 
   184  0394                     	;# 
   185  0395                     	;# 
   186  0396                     	;# 
   187  0FE4                     	;# 
   188  0FE5                     	;# 
   189  0FE6                     	;# 
   190  0FE7                     	;# 
   191  0FE8                     	;# 
   192  0FE9                     	;# 
   193  0FEA                     	;# 
   194  0FEB                     	;# 
   195  0FED                     	;# 
   196  0FEE                     	;# 
   197  0FEF                     	;# 
   198  0711                     	;# 
   199  0712                     	;# 
   200  0713                     	;# 
   201  0714                     	;# 
   202  0715                     	;# 
   203  0716                     	;# 
   204  0717                     	;# 
   205  0718                     	;# 
   206  0719                     	;# 
   207  071A                     	;# 
   208  071A                     	;# 
   209  071A                     	;# 
   210  071B                     	;# 
   211  071C                     	;# 
   212  071C                     	;# 
   213  071C                     	;# 
   214  071D                     	;# 
   215  0000                     	;# 
   216  0001                     	;# 
   217  0002                     	;# 
   218  0003                     	;# 
   219  0004                     	;# 
   220  0005                     	;# 
   221  0006                     	;# 
   222  0007                     	;# 
   223  0008                     	;# 
   224  0009                     	;# 
   225  000A                     	;# 
   226  000B                     	;# 
   227  000C                     	;# 
   228  000D                     	;# 
   229  000E                     	;# 
   230  0010                     	;# 
   231  0011                     	;# 
   232  0012                     	;# 
   233  0015                     	;# 
   234  0016                     	;# 
   235  0016                     	;# 
   236  0017                     	;# 
   237  0018                     	;# 
   238  0019                     	;# 
   239  001A                     	;# 
   240  001B                     	;# 
   241  001C                     	;# 
   242  008C                     	;# 
   243  008D                     	;# 
   244  008E                     	;# 
   245  0090                     	;# 
   246  0091                     	;# 
   247  0092                     	;# 
   248  0095                     	;# 
   249  0096                     	;# 
   250  0097                     	;# 
   251  0099                     	;# 
   252  009A                     	;# 
   253  009B                     	;# 
   254  009B                     	;# 
   255  009B                     	;# 
   256  009B                     	;# 
   257  009C                     	;# 
   258  009C                     	;# 
   259  009D                     	;# 
   260  009E                     	;# 
   261  010C                     	;# 
   262  010D                     	;# 
   263  010E                     	;# 
   264  0116                     	;# 
   265  0117                     	;# 
   266  011D                     	;# 
   267  018C                     	;# 
   268  018D                     	;# 
   269  018E                     	;# 
   270  0191                     	;# 
   271  0191                     	;# 
   272  0192                     	;# 
   273  0193                     	;# 
   274  0193                     	;# 
   275  0194                     	;# 
   276  0195                     	;# 
   277  0196                     	;# 
   278  0197                     	;# 
   279  0199                     	;# 
   280  019A                     	;# 
   281  019B                     	;# 
   282  019B                     	;# 
   283  019B                     	;# 
   284  019B                     	;# 
   285  019C                     	;# 
   286  019C                     	;# 
   287  019D                     	;# 
   288  019E                     	;# 
   289  019F                     	;# 
   290  020D                     	;# 
   291  0210                     	;# 
   292  0211                     	;# 
   293  0211                     	;# 
   294  0212                     	;# 
   295  0212                     	;# 
   296  0213                     	;# 
   297  0213                     	;# 
   298  0214                     	;# 
   299  0214                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0215                     	;# 
   303  0216                     	;# 
   304  0216                     	;# 
   305  0217                     	;# 
   306  0217                     	;# 
   307  0291                     	;# 
   308  0291                     	;# 
   309  0292                     	;# 
   310  0293                     	;# 
   311  0298                     	;# 
   312  0298                     	;# 
   313  0299                     	;# 
   314  029A                     	;# 
   315  0394                     	;# 
   316  0395                     	;# 
   317  0396                     	;# 
   318  0FE4                     	;# 
   319  0FE5                     	;# 
   320  0FE6                     	;# 
   321  0FE7                     	;# 
   322  0FE8                     	;# 
   323  0FE9                     	;# 
   324  0FEA                     	;# 
   325  0FEB                     	;# 
   326  0FED                     	;# 
   327  0FEE                     	;# 
   328  0FEF                     	;# 
   329  0711                     	;# 
   330  0712                     	;# 
   331  0713                     	;# 
   332  0714                     	;# 
   333  0715                     	;# 
   334  0716                     	;# 
   335  0717                     	;# 
   336  0718                     	;# 
   337  0719                     	;# 
   338  071A                     	;# 
   339  071A                     	;# 
   340  071A                     	;# 
   341  071B                     	;# 
   342  071C                     	;# 
   343  071C                     	;# 
   344  071C                     	;# 
   345  071D                     	;# 
   346  0000                     	;# 
   347  0001                     	;# 
   348  0002                     	;# 
   349  0003                     	;# 
   350  0004                     	;# 
   351  0005                     	;# 
   352  0006                     	;# 
   353  0007                     	;# 
   354  0008                     	;# 
   355  0009                     	;# 
   356  000A                     	;# 
   357  000B                     	;# 
   358  000C                     	;# 
   359  000D                     	;# 
   360  000E                     	;# 
   361  0010                     	;# 
   362  0011                     	;# 
   363  0012                     	;# 
   364  0015                     	;# 
   365  0016                     	;# 
   366  0016                     	;# 
   367  0017                     	;# 
   368  0018                     	;# 
   369  0019                     	;# 
   370  001A                     	;# 
   371  001B                     	;# 
   372  001C                     	;# 
   373  008C                     	;# 
   374  008D                     	;# 
   375  008E                     	;# 
   376  0090                     	;# 
   377  0091                     	;# 
   378  0092                     	;# 
   379  0095                     	;# 
   380  0096                     	;# 
   381  0097                     	;# 
   382  0099                     	;# 
   383  009A                     	;# 
   384  009B                     	;# 
   385  009B                     	;# 
   386  009B                     	;# 
   387  009B                     	;# 
   388  009C                     	;# 
   389  009C                     	;# 
   390  009D                     	;# 
   391  009E                     	;# 
   392  010C                     	;# 
   393  010D                     	;# 
   394  010E                     	;# 
   395  0116                     	;# 
   396  0117                     	;# 
   397  011D                     	;# 
   398  018C                     	;# 
   399  018D                     	;# 
   400  018E                     	;# 
   401  0191                     	;# 
   402  0191                     	;# 
   403  0192                     	;# 
   404  0193                     	;# 
   405  0193                     	;# 
   406  0194                     	;# 
   407  0195                     	;# 
   408  0196                     	;# 
   409  0197                     	;# 
   410  0199                     	;# 
   411  019A                     	;# 
   412  019B                     	;# 
   413  019B                     	;# 
   414  019B                     	;# 
   415  019B                     	;# 
   416  019C                     	;# 
   417  019C                     	;# 
   418  019D                     	;# 
   419  019E                     	;# 
   420  019F                     	;# 
   421  020D                     	;# 
   422  0210                     	;# 
   423  0211                     	;# 
   424  0211                     	;# 
   425  0212                     	;# 
   426  0212                     	;# 
   427  0213                     	;# 
   428  0213                     	;# 
   429  0214                     	;# 
   430  0214                     	;# 
   431  0215                     	;# 
   432  0215                     	;# 
   433  0215                     	;# 
   434  0216                     	;# 
   435  0216                     	;# 
   436  0217                     	;# 
   437  0217                     	;# 
   438  0291                     	;# 
   439  0291                     	;# 
   440  0292                     	;# 
   441  0293                     	;# 
   442  0298                     	;# 
   443  0298                     	;# 
   444  0299                     	;# 
   445  029A                     	;# 
   446  0394                     	;# 
   447  0395                     	;# 
   448  0396                     	;# 
   449  0FE4                     	;# 
   450  0FE5                     	;# 
   451  0FE6                     	;# 
   452  0FE7                     	;# 
   453  0FE8                     	;# 
   454  0FE9                     	;# 
   455  0FEA                     	;# 
   456  0FEB                     	;# 
   457  0FED                     	;# 
   458  0FEE                     	;# 
   459  0FEF                     	;# 
   460  0711                     	;# 
   461  0712                     	;# 
   462  0713                     	;# 
   463  0714                     	;# 
   464  0715                     	;# 
   465  0716                     	;# 
   466  0717                     	;# 
   467  0718                     	;# 
   468  0719                     	;# 
   469  071A                     	;# 
   470  071A                     	;# 
   471  071A                     	;# 
   472  071B                     	;# 
   473  071C                     	;# 
   474  071C                     	;# 
   475  071C                     	;# 
   476  071D                     	;# 
   477  0000                     	;# 
   478  0001                     	;# 
   479  0002                     	;# 
   480  0003                     	;# 
   481  0004                     	;# 
   482  0005                     	;# 
   483  0006                     	;# 
   484  0007                     	;# 
   485  0008                     	;# 
   486  0009                     	;# 
   487  000A                     	;# 
   488  000B                     	;# 
   489  000C                     	;# 
   490  000D                     	;# 
   491  000E                     	;# 
   492  0010                     	;# 
   493  0011                     	;# 
   494  0012                     	;# 
   495  0015                     	;# 
   496  0016                     	;# 
   497  0016                     	;# 
   498  0017                     	;# 
   499  0018                     	;# 
   500  0019                     	;# 
   501  001A                     	;# 
   502  001B                     	;# 
   503  001C                     	;# 
   504  008C                     	;# 
   505  008D                     	;# 
   506  008E                     	;# 
   507  0090                     	;# 
   508  0091                     	;# 
   509  0092                     	;# 
   510  0095                     	;# 
   511  0096                     	;# 
   512  0097                     	;# 
   513  0099                     	;# 
   514  009A                     	;# 
   515  009B                     	;# 
   516  009B                     	;# 
   517  009B                     	;# 
   518  009B                     	;# 
   519  009C                     	;# 
   520  009C                     	;# 
   521  009D                     	;# 
   522  009E                     	;# 
   523  010C                     	;# 
   524  010D                     	;# 
   525  010E                     	;# 
   526  0116                     	;# 
   527  0117                     	;# 
   528  011D                     	;# 
   529  018C                     	;# 
   530  018D                     	;# 
   531  018E                     	;# 
   532  0191                     	;# 
   533  0191                     	;# 
   534  0192                     	;# 
   535  0193                     	;# 
   536  0193                     	;# 
   537  0194                     	;# 
   538  0195                     	;# 
   539  0196                     	;# 
   540  0197                     	;# 
   541  0199                     	;# 
   542  019A                     	;# 
   543  019B                     	;# 
   544  019B                     	;# 
   545  019B                     	;# 
   546  019B                     	;# 
   547  019C                     	;# 
   548  019C                     	;# 
   549  019D                     	;# 
   550  019E                     	;# 
   551  019F                     	;# 
   552  020D                     	;# 
   553  0210                     	;# 
   554  0211                     	;# 
   555  0211                     	;# 
   556  0212                     	;# 
   557  0212                     	;# 
   558  0213                     	;# 
   559  0213                     	;# 
   560  0214                     	;# 
   561  0214                     	;# 
   562  0215                     	;# 
   563  0215                     	;# 
   564  0215                     	;# 
   565  0216                     	;# 
   566  0216                     	;# 
   567  0217                     	;# 
   568  0217                     	;# 
   569  0291                     	;# 
   570  0291                     	;# 
   571  0292                     	;# 
   572  0293                     	;# 
   573  0298                     	;# 
   574  0298                     	;# 
   575  0299                     	;# 
   576  029A                     	;# 
   577  0394                     	;# 
   578  0395                     	;# 
   579  0396                     	;# 
   580  0FE4                     	;# 
   581  0FE5                     	;# 
   582  0FE6                     	;# 
   583  0FE7                     	;# 
   584  0FE8                     	;# 
   585  0FE9                     	;# 
   586  0FEA                     	;# 
   587  0FEB                     	;# 
   588  0FED                     	;# 
   589  0FEE                     	;# 
   590  0FEF                     	;# 
   591  0711                     	;# 
   592  0712                     	;# 
   593  0713                     	;# 
   594  0714                     	;# 
   595  0715                     	;# 
   596  0716                     	;# 
   597  0717                     	;# 
   598  0718                     	;# 
   599  0719                     	;# 
   600  071A                     	;# 
   601  071A                     	;# 
   602  071A                     	;# 
   603  071B                     	;# 
   604  071C                     	;# 
   605  071C                     	;# 
   606  071C                     	;# 
   607  071D                     	;# 
   608  0000                     	;# 
   609  0001                     	;# 
   610  0002                     	;# 
   611  0003                     	;# 
   612  0004                     	;# 
   613  0005                     	;# 
   614  0006                     	;# 
   615  0007                     	;# 
   616  0008                     	;# 
   617  0009                     	;# 
   618  000A                     	;# 
   619  000B                     	;# 
   620  000C                     	;# 
   621  000D                     	;# 
   622  000E                     	;# 
   623  0010                     	;# 
   624  0011                     	;# 
   625  0012                     	;# 
   626  0015                     	;# 
   627  0016                     	;# 
   628  0016                     	;# 
   629  0017                     	;# 
   630  0018                     	;# 
   631  0019                     	;# 
   632  001A                     	;# 
   633  001B                     	;# 
   634  001C                     	;# 
   635  008C                     	;# 
   636  008D                     	;# 
   637  008E                     	;# 
   638  0090                     	;# 
   639  0091                     	;# 
   640  0092                     	;# 
   641  0095                     	;# 
   642  0096                     	;# 
   643  0097                     	;# 
   644  0099                     	;# 
   645  009A                     	;# 
   646  009B                     	;# 
   647  009B                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  0116                     	;# 
   658  0117                     	;# 
   659  011D                     	;# 
   660  018C                     	;# 
   661  018D                     	;# 
   662  018E                     	;# 
   663  0191                     	;# 
   664  0191                     	;# 
   665  0192                     	;# 
   666  0193                     	;# 
   667  0193                     	;# 
   668  0194                     	;# 
   669  0195                     	;# 
   670  0196                     	;# 
   671  0197                     	;# 
   672  0199                     	;# 
   673  019A                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019C                     	;# 
   679  019C                     	;# 
   680  019D                     	;# 
   681  019E                     	;# 
   682  019F                     	;# 
   683  020D                     	;# 
   684  0210                     	;# 
   685  0211                     	;# 
   686  0211                     	;# 
   687  0212                     	;# 
   688  0212                     	;# 
   689  0213                     	;# 
   690  0213                     	;# 
   691  0214                     	;# 
   692  0214                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0216                     	;# 
   697  0216                     	;# 
   698  0217                     	;# 
   699  0217                     	;# 
   700  0291                     	;# 
   701  0291                     	;# 
   702  0292                     	;# 
   703  0293                     	;# 
   704  0298                     	;# 
   705  0298                     	;# 
   706  0299                     	;# 
   707  029A                     	;# 
   708  0394                     	;# 
   709  0395                     	;# 
   710  0396                     	;# 
   711  0FE4                     	;# 
   712  0FE5                     	;# 
   713  0FE6                     	;# 
   714  0FE7                     	;# 
   715  0FE8                     	;# 
   716  0FE9                     	;# 
   717  0FEA                     	;# 
   718  0FEB                     	;# 
   719  0FED                     	;# 
   720  0FEE                     	;# 
   721  0FEF                     	;# 
   722  0711                     	;# 
   723  0712                     	;# 
   724  0713                     	;# 
   725  0714                     	;# 
   726  0715                     	;# 
   727  0716                     	;# 
   728  0717                     	;# 
   729  0718                     	;# 
   730  0719                     	;# 
   731  071A                     	;# 
   732  071A                     	;# 
   733  071A                     	;# 
   734  071B                     	;# 
   735  071C                     	;# 
   736  071C                     	;# 
   737  071C                     	;# 
   738  071D                     	;# 
   739  0000                     	;# 
   740  0001                     	;# 
   741  0002                     	;# 
   742  0003                     	;# 
   743  0004                     	;# 
   744  0005                     	;# 
   745  0006                     	;# 
   746  0007                     	;# 
   747  0008                     	;# 
   748  0009                     	;# 
   749  000A                     	;# 
   750  000B                     	;# 
   751  000C                     	;# 
   752  000D                     	;# 
   753  000E                     	;# 
   754  0010                     	;# 
   755  0011                     	;# 
   756  0012                     	;# 
   757  0015                     	;# 
   758  0016                     	;# 
   759  0016                     	;# 
   760  0017                     	;# 
   761  0018                     	;# 
   762  0019                     	;# 
   763  001A                     	;# 
   764  001B                     	;# 
   765  001C                     	;# 
   766  008C                     	;# 
   767  008D                     	;# 
   768  008E                     	;# 
   769  0090                     	;# 
   770  0091                     	;# 
   771  0092                     	;# 
   772  0095                     	;# 
   773  0096                     	;# 
   774  0097                     	;# 
   775  0099                     	;# 
   776  009A                     	;# 
   777  009B                     	;# 
   778  009B                     	;# 
   779  009B                     	;# 
   780  009B                     	;# 
   781  009C                     	;# 
   782  009C                     	;# 
   783  009D                     	;# 
   784  009E                     	;# 
   785  010C                     	;# 
   786  010D                     	;# 
   787  010E                     	;# 
   788  0116                     	;# 
   789  0117                     	;# 
   790  011D                     	;# 
   791  018C                     	;# 
   792  018D                     	;# 
   793  018E                     	;# 
   794  0191                     	;# 
   795  0191                     	;# 
   796  0192                     	;# 
   797  0193                     	;# 
   798  0193                     	;# 
   799  0194                     	;# 
   800  0195                     	;# 
   801  0196                     	;# 
   802  0197                     	;# 
   803  0199                     	;# 
   804  019A                     	;# 
   805  019B                     	;# 
   806  019B                     	;# 
   807  019B                     	;# 
   808  019B                     	;# 
   809  019C                     	;# 
   810  019C                     	;# 
   811  019D                     	;# 
   812  019E                     	;# 
   813  019F                     	;# 
   814  020D                     	;# 
   815  0210                     	;# 
   816  0211                     	;# 
   817  0211                     	;# 
   818  0212                     	;# 
   819  0212                     	;# 
   820  0213                     	;# 
   821  0213                     	;# 
   822  0214                     	;# 
   823  0214                     	;# 
   824  0215                     	;# 
   825  0215                     	;# 
   826  0215                     	;# 
   827  0216                     	;# 
   828  0216                     	;# 
   829  0217                     	;# 
   830  0217                     	;# 
   831  0291                     	;# 
   832  0291                     	;# 
   833  0292                     	;# 
   834  0293                     	;# 
   835  0298                     	;# 
   836  0298                     	;# 
   837  0299                     	;# 
   838  029A                     	;# 
   839  0394                     	;# 
   840  0395                     	;# 
   841  0396                     	;# 
   842  0FE4                     	;# 
   843  0FE5                     	;# 
   844  0FE6                     	;# 
   845  0FE7                     	;# 
   846  0FE8                     	;# 
   847  0FE9                     	;# 
   848  0FEA                     	;# 
   849  0FEB                     	;# 
   850  0FED                     	;# 
   851  0FEE                     	;# 
   852  0FEF                     	;# 
   853  0711                     	;# 
   854  0712                     	;# 
   855  0713                     	;# 
   856  0714                     	;# 
   857  0715                     	;# 
   858  0716                     	;# 
   859  0717                     	;# 
   860  0718                     	;# 
   861  0719                     	;# 
   862  071A                     	;# 
   863  071A                     	;# 
   864  071A                     	;# 
   865  071B                     	;# 
   866  071C                     	;# 
   867  071C                     	;# 
   868  071C                     	;# 
   869  071D                     	;# 
   870                           
   871                           	psect	nvBANK0
   872  0052                     __pnvBANK0:	
   873  0052                     _p_disp:	
   874  0052                     	ds	1
   875  0011                     _PIR1bits	set	17
   876  0015                     _TMR0	set	21
   877  000B                     _INTCONbits	set	11
   878  000E                     _PORTCbits	set	14
   879  000D                     _PORTBbits	set	13
   880  005A                     _T0IF	set	90
   881  008B                     _SSPIF	set	139
   882  005D                     _T0IE	set	93
   883  0095                     _OPTION_REGbits	set	149
   884  008E                     _TRISCbits	set	142
   885  008D                     _TRISBbits	set	141
   886  008E                     _TRISC	set	142
   887  008D                     _TRISB	set	141
   888  008C                     _TRISA	set	140
   889  0099                     _OSCCONbits	set	153
   890  010E                     _LATC	set	270
   891  010C                     _LATA	set	268
   892  010D                     _LATB	set	269
   893  018E                     _ANSELC	set	398
   894  018D                     _ANSELB	set	397
   895  018C                     _ANSELA	set	396
   896  0214                     _SSPSTATbits	set	532
   897  0211                     _SSPBUF	set	529
   898  0216                     _SSPCON2bits	set	534
   899  0215                     _SSPCON1	set	533
   900  0212                     _SSPADD	set	530
   901  10B4                     _ACKEN	set	4276
   902  10B1                     _RSEN	set	4273
   903  10B2                     _PEN	set	4274
   904  10B0                     _SEN	set	4272
   905                           
   906                           ; #config settings
   907  0000                     
   908                           	psect	cinit
   909  000E                     start_initialization:	
   910  000E                     __initialization:	
   911                           
   912                           ; Clear objects allocated to BANK0
   913  000E  3020               	movlw	low __pbssBANK0
   914  000F  0084               	movwf	4
   915  0010  3000               	movlw	high __pbssBANK0
   916  0011  0085               	movwf	5
   917  0012  3024               	movlw	36
   918  0013  2552               	fcall	clear_ram0
   919  0014                     end_of_initialization:	
   920                           ;End of C runtime variable initialization code
   921                           
   922  0014                     __end_of__initialization:	
   923  0014  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   924  0015  0020               	movlb	0
   925  0016  2AA2               	ljmp	_main	;jump to C main() function
   926                           
   927                           	psect	bssBANK0
   928  0020                     __pbssBANK0:	
   929  0020                     _old_btns:	
   930  0020                     	ds	5
   931  0025                     _p_btns:	
   932  0025                     	ds	5
   933  002A                     _seg_disp_save:	
   934  002A                     	ds	2
   935  002C                     _seg_disp_sleep:	
   936  002C                     	ds	2
   937  002E                     _last_save_val:	
   938  002E                     	ds	2
   939  0030                     _extended_rst_streak:	
   940  0030                     	ds	2
   941  0032                     _cur_val:	
   942  0032                     	ds	2
   943  0034                     _last_save_cat:	
   944  0034                     	ds	1
   945  0035                     _rst_flag:	
   946  0035                     	ds	1
   947  0036                     _cur_cat:	
   948  0036                     	ds	1
   949  0037                     _INT_FLAGS:	
   950  0037                     	ds	1
   951  0038                     _v_btns:	
   952  0038                     	ds	5
   953  003D                     _ee_seq_4:	
   954  003D                     	ds	4
   955  0041                     _v_disp:	
   956  0041                     	ds	3
   957                           
   958                           	psect	clrtext
   959  0552                     clear_ram0:	
   960                           ;	Called with FSR0 containing the base address, and
   961                           ;	WREG with the size to clear
   962                           
   963  0552  0064               	clrwdt	;clear the watchdog before getting into this loop
   964  0553                     clrloop0:	
   965  0553  0180               	clrf	0	;clear RAM location pointed to by FSR
   966  0554  3101               	addfsr 0,1
   967  0555  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   968  0556  2D53               	goto	clrloop0	;have we reached the end yet?
   969  0557  3400               	retlw	0	;all done for this memory range, return
   970                           
   971                           	psect	cstackCOMMON
   972  0070                     __pcstackCOMMON:	
   973  0070                     ?_init:	
   974  0070                     ??_init:	
   975                           ; 1 bytes @ 0x0
   976                           
   977  0070                     ?_init_structs:	
   978                           ; 1 bytes @ 0x0
   979                           
   980  0070                     ?_eeprom_read_16:	
   981                           ; 1 bytes @ 0x0
   982                           
   983  0070                     ?_rst_storage:	
   984                           ; 1 bytes @ 0x0
   985                           
   986  0070                     ?_eeprom_write_16:	
   987                           ; 1 bytes @ 0x0
   988                           
   989  0070                     ?_change_category:	
   990                           ; 1 bytes @ 0x0
   991                           
   992  0070                     ?_update_switches:	
   993                           ; 1 bytes @ 0x0
   994                           
   995  0070                     ?_update_int_flags:	
   996                           ; 1 bytes @ 0x0
   997                           
   998  0070                     ?_update_switch:	
   999                           ; 1 bytes @ 0x0
  1000                           
  1001  0070                     ?_get_switch_toggle:	
  1002                           ; 1 bytes @ 0x0
  1003                           
  1004  0070                     ?_seg_disp_awake:	
  1005                           ; 1 bytes @ 0x0
  1006                           
  1007  0070                     ??_seg_disp_awake:	
  1008                           ; 1 bytes @ 0x0
  1009                           
  1010  0070                     ?_increment:	
  1011                           ; 1 bytes @ 0x0
  1012                           
  1013  0070                     ??_increment:	
  1014                           ; 1 bytes @ 0x0
  1015                           
  1016  0070                     ?_decrement:	
  1017                           ; 1 bytes @ 0x0
  1018                           
  1019  0070                     ??_decrement:	
  1020                           ; 1 bytes @ 0x0
  1021                           
  1022  0070                     ?_get_switch_status:	
  1023                           ; 1 bytes @ 0x0
  1024                           
  1025  0070                     ??_get_switch_status:	
  1026                           ; 1 bytes @ 0x0
  1027                           
  1028  0070                     ?_seg_disp_47_off:	
  1029                           ; 1 bytes @ 0x0
  1030                           
  1031  0070                     ??_seg_disp_47_off:	
  1032                           ; 1 bytes @ 0x0
  1033                           
  1034  0070                     ?_seg_disp_47_on:	
  1035                           ; 1 bytes @ 0x0
  1036                           
  1037  0070                     ??_seg_disp_47_on:	
  1038                           ; 1 bytes @ 0x0
  1039                           
  1040  0070                     ?_vis_next_digit:	
  1041                           ; 1 bytes @ 0x0
  1042                           
  1043  0070                     ?_cat_auto_save:	
  1044                           ; 1 bytes @ 0x0
  1045                           
  1046  0070                     ?_create_switch:	
  1047                           ; 1 bytes @ 0x0
  1048                           
  1049  0070                     ??_create_switch:	
  1050                           ; 1 bytes @ 0x0
  1051                           
  1052  0070                     ?_create_seg_disp_47:	
  1053                           ; 1 bytes @ 0x0
  1054                           
  1055  0070                     ??_create_seg_disp_47:	
  1056                           ; 1 bytes @ 0x0
  1057                           
  1058  0070                     ?_init_oscillerator:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061  0070                     ??_init_oscillerator:	
  1062                           ; 1 bytes @ 0x0
  1063                           
  1064  0070                     ?_init_ports:	
  1065                           ; 1 bytes @ 0x0
  1066                           
  1067  0070                     ??_init_ports:	
  1068                           ; 1 bytes @ 0x0
  1069                           
  1070  0070                     ?_init_i2c:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073  0070                     ??_init_i2c:	
  1074                           ; 1 bytes @ 0x0
  1075                           
  1076  0070                     ?_init_interrupt:	
  1077                           ; 1 bytes @ 0x0
  1078                           
  1079  0070                     ??_init_interrupt:	
  1080                           ; 1 bytes @ 0x0
  1081                           
  1082  0070                     ?_res_ports:	
  1083                           ; 1 bytes @ 0x0
  1084                           
  1085  0070                     ??_res_ports:	
  1086                           ; 1 bytes @ 0x0
  1087                           
  1088  0070                     ?_set_ports:	
  1089                           ; 1 bytes @ 0x0
  1090                           
  1091  0070                     ??_set_ports:	
  1092                           ; 1 bytes @ 0x0
  1093                           
  1094  0070                     ?_init_interrupt_timer:	
  1095                           ; 1 bytes @ 0x0
  1096                           
  1097  0070                     ??_init_interrupt_timer:	
  1098                           ; 1 bytes @ 0x0
  1099                           
  1100  0070                     ?_seg_disp_47_set_val:	
  1101                           ; 1 bytes @ 0x0
  1102                           
  1103  0070                     ?_main:	
  1104                           ; 1 bytes @ 0x0
  1105                           
  1106  0070                     ?_on_interrupt_timer_0:	
  1107                           ; 1 bytes @ 0x0
  1108                           
  1109  0070                     ??_on_interrupt_timer_0:	
  1110                           ; 1 bytes @ 0x0
  1111                           
  1112  0070                     ?_interruptHandler:	
  1113                           ; 1 bytes @ 0x0
  1114                           
  1115  0070                     ??_interruptHandler:	
  1116                           ; 1 bytes @ 0x0
  1117                           
  1118  0070                     ?_seg_disp_47_get_val:	
  1119                           ; 1 bytes @ 0x0
  1120                           
  1121  0070                     ?___wmul:	
  1122                           ; 2 bytes @ 0x0
  1123                           
  1124  0070                     ?___lwdiv:	
  1125                           ; 2 bytes @ 0x0
  1126                           
  1127  0070                     update_switch@sbtn:	
  1128                           ; 2 bytes @ 0x0
  1129                           
  1130  0070                     get_switch_status@s_t:	
  1131                           ; 1 bytes @ 0x0
  1132                           
  1133  0070                     get_switch_toggle@new_s_t:	
  1134                           ; 1 bytes @ 0x0
  1135                           
  1136  0070                     create_seg_disp_47@s_t:	
  1137                           ; 1 bytes @ 0x0
  1138                           
  1139  0070                     seg_disp_47_on@s_t:	
  1140                           ; 1 bytes @ 0x0
  1141                           
  1142  0070                     seg_disp_47_off@s_t:	
  1143                           ; 1 bytes @ 0x0
  1144                           
  1145  0070                     eeprom_write_16@add:	
  1146                           ; 1 bytes @ 0x0
  1147                           
  1148  0070                     eeprom_read_16@add:	
  1149                           ; 2 bytes @ 0x0
  1150                           
  1151  0070                     seg_disp_47_set_val@value:	
  1152                           ; 2 bytes @ 0x0
  1153                           
  1154  0070                     ___wmul@multiplier:	
  1155                           ; 2 bytes @ 0x0
  1156                           
  1157  0070                     ___lwdiv@divisor:	
  1158                           ; 2 bytes @ 0x0
  1159                           
  1160                           
  1161                           ; 2 bytes @ 0x0
  1162  0070                     	ds	1
  1163  0071                     ??_get_switch_toggle:	
  1164  0071                     create_switch@s_t:	
  1165                           ; 1 bytes @ 0x1
  1166                           
  1167  0071                     update_switch@streak:	
  1168                           ; 1 bytes @ 0x1
  1169                           
  1170                           
  1171                           ; 4 bytes @ 0x1
  1172  0071                     	ds	1
  1173  0072                     ??_init_structs:	
  1174  0072                     ??_eeprom_read_16:	
  1175                           ; 1 bytes @ 0x2
  1176                           
  1177  0072                     ??_seg_disp_47_get_val:	
  1178                           ; 1 bytes @ 0x2
  1179                           
  1180  0072                     ??_seg_disp_47_set_val:	
  1181                           ; 1 bytes @ 0x2
  1182                           
  1183  0072                     get_switch_toggle@old_s_t:	
  1184                           ; 1 bytes @ 0x2
  1185                           
  1186  0072                     eeprom_write_16@eeData:	
  1187                           ; 1 bytes @ 0x2
  1188                           
  1189  0072                     ___wmul@multiplicand:	
  1190                           ; 1 bytes @ 0x2
  1191                           
  1192  0072                     ___lwdiv@dividend:	
  1193                           ; 2 bytes @ 0x2
  1194                           
  1195                           
  1196                           ; 2 bytes @ 0x2
  1197  0072                     	ds	1
  1198  0073                     ??_eeprom_write_16:	
  1199  0073                     get_switch_toggle@val:	
  1200                           ; 1 bytes @ 0x3
  1201                           
  1202  0073                     eeprom_read_16@addHigh:	
  1203                           ; 1 bytes @ 0x3
  1204                           
  1205                           
  1206                           ; 1 bytes @ 0x3
  1207  0073                     	ds	1
  1208  0074                     ??___wmul:	
  1209  0074                     ??___lwdiv:	
  1210                           ; 1 bytes @ 0x4
  1211                           
  1212  0074                     eeprom_write_16@slaveAdd:	
  1213                           ; 1 bytes @ 0x4
  1214                           
  1215  0074                     eeprom_read_16@addLow:	
  1216                           ; 1 bytes @ 0x4
  1217                           
  1218  0074                     seg_disp_47_set_val@s_t:	
  1219                           ; 1 bytes @ 0x4
  1220                           
  1221  0074                     ___wmul@product:	
  1222                           ; 1 bytes @ 0x4
  1223                           
  1224                           
  1225                           ; 2 bytes @ 0x4
  1226  0074                     	ds	1
  1227  0075                     ?_update_seg_disp_47:	
  1228  0075                     ??_update_switch:	
  1229                           ; 1 bytes @ 0x5
  1230                           
  1231  0075                     eeprom_write_16@addHigh:	
  1232                           ; 1 bytes @ 0x5
  1233                           
  1234  0075                     eeprom_read_16@tempData:	
  1235                           ; 1 bytes @ 0x5
  1236                           
  1237  0075                     update_seg_disp_47@cur_val:	
  1238                           ; 1 bytes @ 0x5
  1239                           
  1240  0075                     seg_disp_47_get_val@val:	
  1241                           ; 2 bytes @ 0x5
  1242                           
  1243  0075                     ___lwdiv@quotient:	
  1244                           ; 2 bytes @ 0x5
  1245                           
  1246                           
  1247                           ; 2 bytes @ 0x5
  1248  0075                     	ds	1
  1249  0076                     eeprom_write_16@addLow:	
  1250  0076                     eeprom_read_16@slaveAdd:	
  1251                           ; 1 bytes @ 0x6
  1252                           
  1253                           
  1254                           ; 1 bytes @ 0x6
  1255  0076                     	ds	1
  1256  0077                     ??_update_seg_disp_47:	
  1257  0077                     ?_set_cat_val:	
  1258                           ; 1 bytes @ 0x7
  1259                           
  1260  0077                     ?_get_cat_val:	
  1261                           ; 1 bytes @ 0x7
  1262                           
  1263  0077                     update_seg_disp_47@s_t:	
  1264                           ; 2 bytes @ 0x7
  1265                           
  1266  0077                     seg_disp_47_get_val@s_t:	
  1267                           ; 1 bytes @ 0x7
  1268                           
  1269  0077                     ___lwdiv@counter:	
  1270                           ; 1 bytes @ 0x7
  1271                           
  1272  0077                     set_cat_val@val:	
  1273                           ; 1 bytes @ 0x7
  1274                           
  1275                           
  1276                           ; 2 bytes @ 0x7
  1277  0077                     	ds	1
  1278  0078                     ?___lwmod:	
  1279  0078                     ___lwmod@divisor:	
  1280                           ; 2 bytes @ 0x8
  1281                           
  1282                           
  1283                           ; 2 bytes @ 0x8
  1284  0078                     	ds	1
  1285  0079                     ??_get_cat_val:	
  1286  0079                     ??_set_cat_val:	
  1287                           ; 1 bytes @ 0x9
  1288                           
  1289  0079                     update_switch@s_t:	
  1290                           ; 1 bytes @ 0x9
  1291                           
  1292                           
  1293                           ; 1 bytes @ 0x9
  1294  0079                     	ds	1
  1295  007A                     ___lwmod@dividend:	
  1296                           
  1297                           ; 2 bytes @ 0xA
  1298  007A                     	ds	1
  1299  007B                     ??_rst_storage:	
  1300  007B                     ??_cat_auto_save:	
  1301                           ; 1 bytes @ 0xB
  1302                           
  1303                           
  1304                           ; 1 bytes @ 0xB
  1305  007B                     	ds	1
  1306  007C                     ??_change_category:	
  1307  007C                     ??___lwmod:	
  1308                           ; 1 bytes @ 0xC
  1309                           
  1310  007C                     rst_storage@i:	
  1311                           ; 1 bytes @ 0xC
  1312                           
  1313                           
  1314                           ; 1 bytes @ 0xC
  1315  007C                     	ds	1
  1316  007D                     change_category@category:	
  1317  007D                     ___lwmod@counter:	
  1318                           ; 1 bytes @ 0xD
  1319                           
  1320                           
  1321                           ; 1 bytes @ 0xD
  1322  007D                     	ds	1
  1323  007E                     ??_update_int_flags:	
  1324                           
  1325                           	psect	cstackBANK0
  1326  0044                     __pcstackBANK0:	
  1327                           ; 1 bytes @ 0xE
  1328                           
  1329  0044                     ??_vis_next_digit:	
  1330  0044                     get_cat_val@add_start:	
  1331                           ; 1 bytes @ 0x0
  1332                           
  1333  0044                     set_cat_val@add_start:	
  1334                           ; 2 bytes @ 0x0
  1335                           
  1336                           
  1337                           ; 2 bytes @ 0x0
  1338  0044                     	ds	2
  1339  0046                     get_cat_val@category:	
  1340  0046                     set_cat_val@category:	
  1341                           ; 1 bytes @ 0x2
  1342                           
  1343                           
  1344                           ; 1 bytes @ 0x2
  1345  0046                     	ds	1
  1346  0047                     set_cat_val@i:	
  1347  0047                     get_cat_val@val:	
  1348                           ; 1 bytes @ 0x3
  1349                           
  1350  0047                     vis_next_digit@val:	
  1351                           ; 2 bytes @ 0x3
  1352                           
  1353                           
  1354                           ; 2 bytes @ 0x3
  1355  0047                     	ds	2
  1356  0049                     get_cat_val@d:	
  1357  0049                     vis_next_digit@digit_val:	
  1358                           ; 1 bytes @ 0x5
  1359                           
  1360                           
  1361                           ; 1 bytes @ 0x5
  1362  0049                     	ds	1
  1363  004A                     get_cat_val@i:	
  1364  004A                     vis_next_digit@sLATB:	
  1365                           ; 1 bytes @ 0x6
  1366                           
  1367                           
  1368                           ; 1 bytes @ 0x6
  1369  004A                     	ds	1
  1370  004B                     ??_update_switches:	
  1371  004B                     vis_next_digit@p:	
  1372                           ; 1 bytes @ 0x7
  1373                           
  1374                           
  1375                           ; 1 bytes @ 0x7
  1376  004B                     	ds	1
  1377  004C                     update_switches@value:	
  1378  004C                     vis_next_digit@digit_divider:	
  1379                           ; 2 bytes @ 0x8
  1380                           
  1381                           
  1382                           ; 2 bytes @ 0x8
  1383  004C                     	ds	2
  1384  004E                     update_switches@i:	
  1385  004E                     vis_next_digit@s_t:	
  1386                           ; 1 bytes @ 0xA
  1387                           
  1388                           
  1389                           ; 1 bytes @ 0xA
  1390  004E                     	ds	1
  1391  004F                     ??_main:	
  1392                           
  1393                           ; 1 bytes @ 0xB
  1394  004F                     	ds	1
  1395  0050                     main@k:	
  1396                           
  1397                           ; 1 bytes @ 0xC
  1398  0050                     	ds	1
  1399  0051                     main@f:	
  1400                           
  1401                           ; 1 bytes @ 0xD
  1402  0051                     	ds	1
  1403                           
  1404                           	psect	maintext
  1405  02A2                     __pmaintext:	
  1406 ;;
  1407 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1408 ;;
  1409 ;; *************** function _main *****************
  1410 ;; Defined at:
  1411 ;;		line 50 in file "counter_1512.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;		None
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;  f               1   13[BANK0 ] unsigned char 
  1416 ;;  k               1   12[BANK0 ] unsigned char 
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  1    wreg      void 
  1419 ;; Registers used:
  1420 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1421 ;; Tracked objects:
  1422 ;;		On entry : B1F/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMMON   BANK0   BANK1
  1426 ;;      Params:         0       0       0
  1427 ;;      Locals:         0       2       0
  1428 ;;      Temps:          0       1       0
  1429 ;;      Totals:         0       3       0
  1430 ;;Total ram usage:        3 bytes
  1431 ;; Hardware stack levels required when called:    6
  1432 ;; This function calls:
  1433 ;;		_change_category
  1434 ;;		_eeprom_read_16
  1435 ;;		_eeprom_write_16
  1436 ;;		_get_cat_val
  1437 ;;		_init
  1438 ;;		_init_structs
  1439 ;;		_rst_storage
  1440 ;;		_update_int_flags
  1441 ;;		_update_seg_disp_47
  1442 ;;		_update_switches
  1443 ;; This function is called by:
  1444 ;;		Startup code after reset
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           
  1449                           ;psect for function _main
  1450  02A2                     _main:	
  1451                           
  1452                           ;counter_1512.c: 51:     init();
  1453                           
  1454                           ;incstack = 0
  1455                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1456  02A2  256F               	fcall	_init
  1457                           
  1458                           ;counter_1512.c: 52:     init_structs();
  1459  02A3  23C5               	fcall	_init_structs
  1460                           
  1461                           ;counter_1512.c: 55:     if (eeprom_read_16(0xA0, 0x0001) != 0x01){
  1462  02A4  3001               	movlw	1
  1463  02A5  00F0               	movwf	eeprom_read_16@add
  1464  02A6  3000               	movlw	0
  1465  02A7  00F1               	movwf	eeprom_read_16@add+1
  1466  02A8  30A0               	movlw	160
  1467  02A9  21F3               	fcall	_eeprom_read_16
  1468  02AA  3A01               	xorlw	1
  1469  02AB  1903               	skipnz
  1470  02AC  2ABF               	goto	l2354
  1471                           
  1472                           ;counter_1512.c: 56:         rst_storage();
  1473  02AD  24F9               	fcall	_rst_storage
  1474                           
  1475                           ;counter_1512.c: 57:         _delay((unsigned long)((5)*(8000000/4000.0)));
  1476  02AE  300D               	movlw	13
  1477  02AF  0020               	movlb	0	; select bank0
  1478  02B0  00CF               	movwf	??_main
  1479  02B1  30FB               	movlw	251
  1480  02B2                     u2677:	
  1481  02B2  0B89               	decfsz	9,f
  1482  02B3  2AB2               	goto	u2677
  1483  02B4  0BCF               	decfsz	??_main,f
  1484  02B5  2AB2               	goto	u2677
  1485  02B6  3200               	nop2
  1486                           
  1487                           ;counter_1512.c: 58:         eeprom_write_16(0xA0, 0x0001, 0x01);
  1488  02B7  3001               	movlw	1
  1489  02B8  00F0               	movwf	eeprom_write_16@add
  1490  02B9  3000               	movlw	0
  1491  02BA  00F1               	movwf	eeprom_write_16@add+1
  1492  02BB  01F2               	clrf	eeprom_write_16@eeData
  1493  02BC  0AF2               	incf	eeprom_write_16@eeData,f
  1494  02BD  30A0               	movlw	160
  1495  02BE  22E7               	fcall	_eeprom_write_16
  1496  02BF                     l2354:	
  1497                           
  1498                           ;counter_1512.c: 62:     uint8_t k = 0; uint8_t f = 0;
  1499  02BF  0020               	movlb	0	; select bank0
  1500  02C0  01D0               	clrf	main@k
  1501  02C1  01D1               	clrf	main@f
  1502  02C2                     l2358:	
  1503                           
  1504                           ;counter_1512.c: 65:         if (f == 0) k++; if (k >= 7 && f == 0) { f = 1; cur_val = g
      +                          et_cat_val (cur_cat); change_category(cur_cat); }
  1505  02C2  0020               	movlb	0	; select bank0
  1506  02C3  0851               	movf	main@f,w
  1507  02C4  1D03               	btfss	3,2
  1508  02C5  2ACA               	goto	l2362
  1509  02C6  3001               	movlw	1
  1510  02C7  00CF               	movwf	??_main
  1511  02C8  084F               	movf	??_main,w
  1512  02C9  07D0               	addwf	main@k,f
  1513  02CA                     l2362:	
  1514  02CA  3007               	movlw	7
  1515  02CB  0250               	subwf	main@k,w
  1516  02CC  1C03               	skipc
  1517  02CD  2ADD               	goto	l2370
  1518  02CE  0851               	movf	main@f,w
  1519  02CF  1D03               	btfss	3,2
  1520  02D0  2ADD               	goto	l2370
  1521  02D1  01D1               	clrf	main@f
  1522  02D2  0AD1               	incf	main@f,f
  1523  02D3  0836               	movf	_cur_cat,w
  1524  02D4  2252               	fcall	_get_cat_val
  1525  02D5  0878               	movf	?_get_cat_val+1,w
  1526  02D6  0020               	movlb	0	; select bank0
  1527  02D7  00B3               	movwf	_cur_val+1
  1528  02D8  0877               	movf	?_get_cat_val,w
  1529  02D9  00B2               	movwf	_cur_val
  1530  02DA  0836               	movf	_cur_cat,w
  1531  02DB  24E4               	fcall	_change_category
  1532  02DC  2AC2               	goto	l2358
  1533  02DD                     l2370:	
  1534                           
  1535                           ;counter_1512.c: 67:             update_switches();
  1536  02DD  2017               	fcall	_update_switches
  1537                           
  1538                           ;counter_1512.c: 68:             update_seg_disp_47(p_disp, cur_val);
  1539  02DE  0020               	movlb	0	; select bank0
  1540  02DF  0833               	movf	_cur_val+1,w
  1541  02E0  00F6               	movwf	update_seg_disp_47@cur_val+1
  1542  02E1  0832               	movf	_cur_val,w
  1543  02E2  00F5               	movwf	update_seg_disp_47@cur_val
  1544  02E3  0852               	movf	_p_disp,w
  1545  02E4  2535               	fcall	_update_seg_disp_47
  1546                           
  1547                           ;counter_1512.c: 69:             update_int_flags();
  1548  02E5  244D               	fcall	_update_int_flags
  1549  02E6  2AC2               	goto	l2358
  1550  02E7                     __end_of_main:	
  1551                           
  1552                           	psect	text1
  1553  0017                     __ptext1:	
  1554 ;; *************** function _update_switches *****************
  1555 ;; Defined at:
  1556 ;;		line 76 in file "counter_1512.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;		None
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;  i               1   10[BANK0 ] unsigned char 
  1561 ;;  value           2    8[BANK0 ] unsigned short 
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  1    wreg      void 
  1564 ;; Registers used:
  1565 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMMON   BANK0   BANK1
  1571 ;;      Params:         0       0       0
  1572 ;;      Locals:         0       3       0
  1573 ;;      Temps:          0       1       0
  1574 ;;      Totals:         0       4       0
  1575 ;;Total ram usage:        4 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; Hardware stack levels required when called:    5
  1578 ;; This function calls:
  1579 ;;		_change_category
  1580 ;;		_decrement
  1581 ;;		_get_switch_status
  1582 ;;		_get_switch_toggle
  1583 ;;		_increment
  1584 ;;		_seg_disp_awake
  1585 ;;		_set_cat_val
  1586 ;;		_update_switch
  1587 ;; This function is called by:
  1588 ;;		_main
  1589 ;; This function uses a non-reentrant model
  1590 ;;
  1591                           
  1592                           
  1593                           ;psect for function _update_switches
  1594  0017                     _update_switches:	
  1595                           
  1596                           ;counter_1512.c: 78:     update_switch (p_btns[0], PORTBbits.RB4, 5);
  1597                           
  1598                           ;incstack = 0
  1599                           ; Regs used in _update_switches: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1600  0017  3000               	movlw	0
  1601  0018  0020               	movlb	0	; select bank0
  1602  0019  1A0D               	btfsc	13,4	;volatile
  1603  001A  3001               	movlw	1
  1604  001B  00F0               	movwf	update_switch@sbtn
  1605  001C  3000               	movlw	0
  1606  001D  00F4               	movwf	update_switch@streak+3
  1607  001E  3000               	movlw	0
  1608  001F  00F3               	movwf	update_switch@streak+2
  1609  0020  3000               	movlw	0
  1610  0021  00F2               	movwf	update_switch@streak+1
  1611  0022  3005               	movlw	5
  1612  0023  00F1               	movwf	update_switch@streak
  1613  0024  0825               	movf	_p_btns,w
  1614  0025  2190               	fcall	_update_switch
  1615                           
  1616                           ;counter_1512.c: 79:     update_switch (p_btns[1], PORTBbits.RB5, 5);
  1617  0026  3000               	movlw	0
  1618  0027  0020               	movlb	0	; select bank0
  1619  0028  1A8D               	btfsc	13,5	;volatile
  1620  0029  3001               	movlw	1
  1621  002A  00F0               	movwf	update_switch@sbtn
  1622  002B  3000               	movlw	0
  1623  002C  00F4               	movwf	update_switch@streak+3
  1624  002D  3000               	movlw	0
  1625  002E  00F3               	movwf	update_switch@streak+2
  1626  002F  3000               	movlw	0
  1627  0030  00F2               	movwf	update_switch@streak+1
  1628  0031  3005               	movlw	5
  1629  0032  00F1               	movwf	update_switch@streak
  1630  0033  0826               	movf	low ((_p_btns| 0+1)),w
  1631  0034  2190               	fcall	_update_switch
  1632                           
  1633                           ;counter_1512.c: 80:     update_switch (p_btns[2], PORTBbits.RB6, 5);
  1634  0035  3000               	movlw	0
  1635  0036  0020               	movlb	0	; select bank0
  1636  0037  1B0D               	btfsc	13,6	;volatile
  1637  0038  3001               	movlw	1
  1638  0039  00F0               	movwf	update_switch@sbtn
  1639  003A  3000               	movlw	0
  1640  003B  00F4               	movwf	update_switch@streak+3
  1641  003C  3000               	movlw	0
  1642  003D  00F3               	movwf	update_switch@streak+2
  1643  003E  3000               	movlw	0
  1644  003F  00F2               	movwf	update_switch@streak+1
  1645  0040  3005               	movlw	5
  1646  0041  00F1               	movwf	update_switch@streak
  1647  0042  0827               	movf	low ((_p_btns| 0+2)),w
  1648  0043  2190               	fcall	_update_switch
  1649                           
  1650                           ;counter_1512.c: 81:     update_switch (p_btns[3], PORTBbits.RB7, 5);
  1651  0044  3000               	movlw	0
  1652  0045  0020               	movlb	0	; select bank0
  1653  0046  1B8D               	btfsc	13,7	;volatile
  1654  0047  3001               	movlw	1
  1655  0048  00F0               	movwf	update_switch@sbtn
  1656  0049  3000               	movlw	0
  1657  004A  00F4               	movwf	update_switch@streak+3
  1658  004B  3000               	movlw	0
  1659  004C  00F3               	movwf	update_switch@streak+2
  1660  004D  3000               	movlw	0
  1661  004E  00F2               	movwf	update_switch@streak+1
  1662  004F  3005               	movlw	5
  1663  0050  00F1               	movwf	update_switch@streak
  1664  0051  0828               	movf	low ((_p_btns| 0+3)),w
  1665  0052  2190               	fcall	_update_switch
  1666                           
  1667                           ;counter_1512.c: 82:     update_switch (p_btns[4], PORTCbits.RC5, 5);
  1668  0053  3000               	movlw	0
  1669  0054  0020               	movlb	0	; select bank0
  1670  0055  1A8E               	btfsc	14,5	;volatile
  1671  0056  3001               	movlw	1
  1672  0057  00F0               	movwf	update_switch@sbtn
  1673  0058  3000               	movlw	0
  1674  0059  00F4               	movwf	update_switch@streak+3
  1675  005A  3000               	movlw	0
  1676  005B  00F3               	movwf	update_switch@streak+2
  1677  005C  3000               	movlw	0
  1678  005D  00F2               	movwf	update_switch@streak+1
  1679  005E  3005               	movlw	5
  1680  005F  00F1               	movwf	update_switch@streak
  1681  0060  0829               	movf	low ((_p_btns| 0+4)),w
  1682  0061  2190               	fcall	_update_switch
  1683                           
  1684                           ;counter_1512.c: 84:     uint16_t value = cur_val;
  1685  0062  0020               	movlb	0	; select bank0
  1686  0063  0833               	movf	_cur_val+1,w
  1687  0064  00CD               	movwf	update_switches@value+1
  1688  0065  0832               	movf	_cur_val,w
  1689  0066  00CC               	movwf	update_switches@value
  1690                           
  1691                           ;counter_1512.c: 85:     if (get_switch_toggle(old_btns[0], v_btns[0])){
  1692  0067  0838               	movf	_v_btns,w
  1693  0068  00CB               	movwf	??_update_switches
  1694  0069  084B               	movf	??_update_switches,w
  1695  006A  00F0               	movwf	get_switch_toggle@new_s_t
  1696  006B  0820               	movf	_old_btns,w
  1697  006C  24CF               	fcall	_get_switch_toggle
  1698  006D  3A00               	xorlw	0
  1699  006E  1903               	skipnz
  1700  006F  287A               	goto	l2250
  1701                           
  1702                           ;counter_1512.c: 86:         seg_disp_awake();
  1703  0070  2558               	fcall	_seg_disp_awake
  1704                           
  1705                           ;counter_1512.c: 87:         if (value == 9999) {}
  1706  0071  300F               	movlw	15
  1707  0072  0020               	movlb	0	; select bank0
  1708  0073  064C               	xorwf	update_switches@value,w
  1709  0074  3027               	movlw	39
  1710  0075  1903               	skipnz
  1711  0076  064D               	xorwf	update_switches@value+1,w
  1712  0077  1903               	btfsc	3,2
  1713  0078  287A               	goto	l2250
  1714  0079  255E               	fcall	_increment
  1715  007A                     l2250:	
  1716                           
  1717                           ;counter_1512.c: 90:     if (get_switch_toggle(old_btns[1], v_btns[1])) {
  1718  007A  0020               	movlb	0	; select bank0
  1719  007B  0839               	movf	_v_btns+1,w
  1720  007C  00CB               	movwf	??_update_switches
  1721  007D  084B               	movf	??_update_switches,w
  1722  007E  00F0               	movwf	get_switch_toggle@new_s_t
  1723  007F  0821               	movf	_old_btns+1,w
  1724  0080  24CF               	fcall	_get_switch_toggle
  1725  0081  3A00               	xorlw	0
  1726  0082  1903               	skipnz
  1727  0083  288B               	goto	l2260
  1728                           
  1729                           ;counter_1512.c: 91:         seg_disp_awake();
  1730  0084  2558               	fcall	_seg_disp_awake
  1731                           
  1732                           ;counter_1512.c: 92:         if (value == 0) {}
  1733  0085  0020               	movlb	0	; select bank0
  1734  0086  084C               	movf	update_switches@value,w
  1735  0087  044D               	iorwf	update_switches@value+1,w
  1736  0088  1903               	btfsc	3,2
  1737  0089  288B               	goto	l2260
  1738  008A  2564               	fcall	_decrement
  1739  008B                     l2260:	
  1740                           
  1741                           ;counter_1512.c: 95:     if (get_switch_toggle(old_btns[2], v_btns[2])) {
  1742  008B  0020               	movlb	0	; select bank0
  1743  008C  083A               	movf	_v_btns+2,w
  1744  008D  00CB               	movwf	??_update_switches
  1745  008E  084B               	movf	??_update_switches,w
  1746  008F  00F0               	movwf	get_switch_toggle@new_s_t
  1747  0090  0822               	movf	_old_btns+2,w
  1748  0091  24CF               	fcall	_get_switch_toggle
  1749  0092  3A00               	xorlw	0
  1750  0093  1903               	skipnz
  1751  0094  2898               	goto	l2266
  1752                           
  1753                           ;counter_1512.c: 96:         seg_disp_awake();
  1754  0095  2558               	fcall	_seg_disp_awake
  1755                           
  1756                           ;counter_1512.c: 97:         change_category(0);
  1757  0096  3000               	movlw	0
  1758  0097  24E4               	fcall	_change_category
  1759  0098                     l2266:	
  1760                           
  1761                           ;counter_1512.c: 99:     if (get_switch_toggle(old_btns[3], v_btns[3])){
  1762  0098  0020               	movlb	0	; select bank0
  1763  0099  083B               	movf	_v_btns+3,w
  1764  009A  00CB               	movwf	??_update_switches
  1765  009B  084B               	movf	??_update_switches,w
  1766  009C  00F0               	movwf	get_switch_toggle@new_s_t
  1767  009D  0823               	movf	_old_btns+3,w
  1768  009E  24CF               	fcall	_get_switch_toggle
  1769  009F  3A00               	xorlw	0
  1770  00A0  1903               	skipnz
  1771  00A1  28A5               	goto	l2272
  1772                           
  1773                           ;counter_1512.c: 100:         seg_disp_awake();
  1774  00A2  2558               	fcall	_seg_disp_awake
  1775                           
  1776                           ;counter_1512.c: 101:         change_category(1);
  1777  00A3  3001               	movlw	1
  1778  00A4  24E4               	fcall	_change_category
  1779  00A5                     l2272:	
  1780                           
  1781                           ;counter_1512.c: 103:     if (get_switch_status(v_btns[4]) == 1 ){
  1782  00A5  0020               	movlb	0	; select bank0
  1783  00A6  083C               	movf	_v_btns+4,w
  1784  00A7  256A               	fcall	_get_switch_status
  1785  00A8  3A01               	xorlw	1
  1786  00A9  1D03               	skipz
  1787  00AA  28C3               	goto	l2284
  1788                           
  1789                           ;counter_1512.c: 104:         seg_disp_awake();
  1790  00AB  2558               	fcall	_seg_disp_awake
  1791                           
  1792                           ;counter_1512.c: 105:         extended_rst_streak++;
  1793  00AC  3001               	movlw	1
  1794  00AD  0020               	movlb	0	; select bank0
  1795  00AE  07B0               	addwf	_extended_rst_streak,f
  1796  00AF  3000               	movlw	0
  1797  00B0  3DB1               	addwfc	_extended_rst_streak+1,f
  1798                           
  1799                           ;counter_1512.c: 106:         if (extended_rst_streak == 10000) { extended_rst_streak = 
      +                          0; cur_val = 0; set_cat_val(cur_cat, cur_val); }
  1800  00B1  3010               	movlw	16
  1801  00B2  0630               	xorwf	_extended_rst_streak,w
  1802  00B3  3027               	movlw	39
  1803  00B4  1903               	skipnz
  1804  00B5  0631               	xorwf	_extended_rst_streak+1,w
  1805  00B6  1D03               	btfss	3,2
  1806  00B7  28C6               	goto	l96
  1807  00B8  01B0               	clrf	_extended_rst_streak
  1808  00B9  01B1               	clrf	_extended_rst_streak+1
  1809  00BA  01B2               	clrf	_cur_val
  1810  00BB  01B3               	clrf	_cur_val+1
  1811  00BC  0833               	movf	_cur_val+1,w
  1812  00BD  00F8               	movwf	set_cat_val@val+1
  1813  00BE  0832               	movf	_cur_val,w
  1814  00BF  00F7               	movwf	set_cat_val@val
  1815  00C0  0836               	movf	_cur_cat,w
  1816  00C1  2329               	fcall	_set_cat_val
  1817  00C2  28C6               	goto	l96
  1818  00C3                     l2284:	
  1819                           
  1820                           ;counter_1512.c: 109:         extended_rst_streak = 0;
  1821  00C3  0020               	movlb	0	; select bank0
  1822  00C4  01B0               	clrf	_extended_rst_streak
  1823  00C5  01B1               	clrf	_extended_rst_streak+1
  1824  00C6                     l96:	
  1825                           ;counter_1512.c: 110:     }
  1826                           
  1827                           
  1828                           ;counter_1512.c: 114:     for (uint8_t i = 0; i < 5; i++){
  1829  00C6  0020               	movlb	0	; select bank0
  1830  00C7  01CE               	clrf	update_switches@i
  1831  00C8                     l2290:	
  1832                           
  1833                           ;counter_1512.c: 115:         old_btns[i] = v_btns[i];
  1834  00C8  084E               	movf	update_switches@i,w
  1835  00C9  3E38               	addlw	(low (_v_btns| 0))& (0+255)
  1836  00CA  0086               	movwf	6
  1837  00CB  0187               	clrf	7
  1838  00CC  0801               	movf	1,w
  1839  00CD  00CB               	movwf	??_update_switches
  1840  00CE  084E               	movf	update_switches@i,w
  1841  00CF  3E20               	addlw	(low (_old_btns| 0))& (0+255)
  1842  00D0  0086               	movwf	6
  1843  00D1  0187               	clrf	7
  1844  00D2  084B               	movf	??_update_switches,w
  1845  00D3  0081               	movwf	1
  1846                           
  1847                           ;counter_1512.c: 116:     }
  1848  00D4  3001               	movlw	1
  1849  00D5  00CB               	movwf	??_update_switches
  1850  00D6  084B               	movf	??_update_switches,w
  1851  00D7  07CE               	addwf	update_switches@i,f
  1852  00D8  3005               	movlw	5
  1853  00D9  024E               	subwf	update_switches@i,w
  1854  00DA  1803               	btfsc	3,0
  1855  00DB  0008               	return
  1856  00DC  28C8               	goto	l2290
  1857  00DD                     __end_of_update_switches:	
  1858                           
  1859                           	psect	text2
  1860  0190                     __ptext2:	
  1861 ;; *************** function _update_switch *****************
  1862 ;; Defined at:
  1863 ;;		line 20 in file "switches.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;  s_t             1    wreg     PTR struct .
  1866 ;;		 -> v_btns(5), 
  1867 ;;  sbtn            1    0[COMMON] unsigned char 
  1868 ;;  streak          4    1[COMMON] unsigned long 
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;  s_t             1    9[COMMON] PTR struct .
  1871 ;;		 -> v_btns(5), 
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      void 
  1874 ;; Registers used:
  1875 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMMON   BANK0   BANK1
  1881 ;;      Params:         5       0       0
  1882 ;;      Locals:         1       0       0
  1883 ;;      Temps:          4       0       0
  1884 ;;      Totals:        10       0       0
  1885 ;;Total ram usage:       10 bytes
  1886 ;; Hardware stack levels used:    1
  1887 ;; Hardware stack levels required when called:    2
  1888 ;; This function calls:
  1889 ;;		Nothing
  1890 ;; This function is called by:
  1891 ;;		_update_switches
  1892 ;; This function uses a non-reentrant model
  1893 ;;
  1894                           
  1895                           
  1896                           ;psect for function _update_switch
  1897  0190                     _update_switch:	
  1898                           
  1899                           ;incstack = 0
  1900                           ; Regs used in _update_switch: [wreg+fsr1l+fsr1h+status,2+status,0]
  1901                           ;update_switch@s_t stored from wreg
  1902  0190  00F9               	movwf	update_switch@s_t
  1903                           
  1904                           ;switches.c: 21:     if (sbtn == s_t->prev && sbtn != s_t->state){
  1905  0191  0879               	movf	update_switch@s_t,w
  1906  0192  0086               	movwf	6
  1907  0193  0187               	clrf	7
  1908  0194  0801               	movf	1,w
  1909  0195  3901               	andlw	1
  1910  0196  0670               	xorwf	update_switch@sbtn,w
  1911  0197  1D03               	skipz
  1912  0198  29E5               	goto	l2070
  1913  0199  0879               	movf	update_switch@s_t,w
  1914  019A  0086               	movwf	6
  1915  019B  0187               	clrf	7
  1916  019C  0C01               	rrf	1,w
  1917  019D  3901               	andlw	1
  1918  019E  0670               	xorwf	update_switch@sbtn,w
  1919  019F  1903               	skipnz
  1920  01A0  29E5               	goto	l2070
  1921                           
  1922                           ;switches.c: 22:         s_t->streak ++;
  1923  01A1  0879               	movf	update_switch@s_t,w
  1924  01A2  0086               	movwf	6
  1925  01A3  0187               	clrf	7
  1926  01A4  0C01               	rrf	1,w
  1927  01A5  00F5               	movwf	??_update_switch
  1928  01A6  0C75               	rrf	??_update_switch,w
  1929  01A7  391F               	andlw	31
  1930  01A8  00F5               	movwf	??_update_switch
  1931  01A9  0AF5               	incf	??_update_switch,f
  1932  01AA  0DF5               	rlf	??_update_switch,f
  1933  01AB  0DF5               	rlf	??_update_switch,f
  1934  01AC  0801               	movf	1,w
  1935  01AD  0675               	xorwf	??_update_switch,w
  1936  01AE  3983               	andlw	-125
  1937  01AF  0675               	xorwf	??_update_switch,w
  1938  01B0  0081               	movwf	1
  1939                           
  1940                           ;switches.c: 23:         if (s_t->streak >= streak){
  1941  01B1  0879               	movf	update_switch@s_t,w
  1942  01B2  0086               	movwf	6
  1943  01B3  0187               	clrf	7
  1944  01B4  0C01               	rrf	1,w
  1945  01B5  0C89               	rrf	9,f
  1946  01B6  391F               	andlw	31
  1947  01B7  00F5               	movwf	??_update_switch
  1948  01B8  01F6               	clrf	??_update_switch+1
  1949  01B9  01F7               	clrf	??_update_switch+2
  1950  01BA  01F8               	clrf	??_update_switch+3
  1951  01BB  0874               	movf	update_switch@streak+3,w
  1952  01BC  0278               	subwf	??_update_switch+3,w
  1953  01BD  1D03               	skipz
  1954  01BE  29C9               	goto	u2135
  1955  01BF  0873               	movf	update_switch@streak+2,w
  1956  01C0  0277               	subwf	??_update_switch+2,w
  1957  01C1  1D03               	skipz
  1958  01C2  29C9               	goto	u2135
  1959  01C3  0872               	movf	update_switch@streak+1,w
  1960  01C4  0276               	subwf	??_update_switch+1,w
  1961  01C5  1D03               	skipz
  1962  01C6  29C9               	goto	u2135
  1963  01C7  0871               	movf	update_switch@streak,w
  1964  01C8  0275               	subwf	??_update_switch,w
  1965  01C9                     u2135:	
  1966  01C9  1C03               	skipc
  1967  01CA  0008               	return
  1968                           
  1969                           ;switches.c: 24:             s_t->state = sbtn;
  1970  01CB  0879               	movf	update_switch@s_t,w
  1971  01CC  0086               	movwf	6
  1972  01CD  0187               	clrf	7
  1973  01CE  0870               	movf	update_switch@sbtn,w
  1974  01CF  3901               	andlw	1
  1975  01D0  1081               	bcf	1,1
  1976  01D1  1D03               	skipz
  1977  01D2  1481               	bsf	1,1
  1978                           
  1979                           ;switches.c: 25:             s_t->status = !sbtn;
  1980  01D3  0870               	movf	update_switch@sbtn,w
  1981  01D4  1D03               	btfss	3,2
  1982  01D5  29D8               	goto	u2140
  1983  01D6  3001               	movlw	1
  1984  01D7  29D9               	goto	u2150
  1985  01D8                     u2140:	
  1986  01D8  3000               	movlw	0
  1987  01D9                     u2150:	
  1988  01D9  00F5               	movwf	??_update_switch
  1989  01DA  0879               	movf	update_switch@s_t,w
  1990  01DB  0086               	movwf	6
  1991  01DC  0187               	clrf	7
  1992  01DD  0CF5               	rrf	??_update_switch,f
  1993  01DE  0CF5               	rrf	??_update_switch,f
  1994  01DF  0801               	movf	1,w
  1995  01E0  0675               	xorwf	??_update_switch,w
  1996  01E1  397F               	andlw	-129
  1997  01E2  0675               	xorwf	??_update_switch,w
  1998  01E3  0081               	movwf	1
  1999  01E4  0008               	return
  2000  01E5                     l2070:	
  2001                           
  2002                           ;switches.c: 29:         s_t->prev = sbtn;
  2003  01E5  0879               	movf	update_switch@s_t,w
  2004  01E6  0086               	movwf	6
  2005  01E7  0187               	clrf	7
  2006  01E8  0870               	movf	update_switch@sbtn,w
  2007  01E9  3901               	andlw	1
  2008  01EA  1001               	bcf	1,0
  2009  01EB  1D03               	skipz
  2010  01EC  1401               	bsf	1,0
  2011                           
  2012                           ;switches.c: 30:         s_t->streak = 0;
  2013  01ED  0879               	movf	update_switch@s_t,w
  2014  01EE  0086               	movwf	6
  2015  01EF  0187               	clrf	7
  2016  01F0  3083               	movlw	-125
  2017  01F1  0581               	andwf	1,f
  2018  01F2  0008               	return
  2019  01F3                     __end_of_update_switch:	
  2020                           
  2021                           	psect	text3
  2022  0558                     __ptext3:	
  2023 ;; *************** function _seg_disp_awake *****************
  2024 ;; Defined at:
  2025 ;;		line 43 in file "interrupts.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;		None
  2028 ;; Auto vars:     Size  Location     Type
  2029 ;;		None
  2030 ;; Return value:  Size  Location     Type
  2031 ;;                  1    wreg      void 
  2032 ;; Registers used:
  2033 ;;		status,2
  2034 ;; Tracked objects:
  2035 ;;		On entry : 0/0
  2036 ;;		On exit  : 0/0
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMMON   BANK0   BANK1
  2039 ;;      Params:         0       0       0
  2040 ;;      Locals:         0       0       0
  2041 ;;      Temps:          0       0       0
  2042 ;;      Totals:         0       0       0
  2043 ;;Total ram usage:        0 bytes
  2044 ;; Hardware stack levels used:    1
  2045 ;; Hardware stack levels required when called:    2
  2046 ;; This function calls:
  2047 ;;		Nothing
  2048 ;; This function is called by:
  2049 ;;		_update_switches
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           
  2054                           ;psect for function _seg_disp_awake
  2055  0558                     _seg_disp_awake:	
  2056                           
  2057                           ;interrupts.c: 44:     seg_disp_sleep = 0;
  2058                           
  2059                           ;incstack = 0
  2060                           ; Regs used in _seg_disp_awake: [status,2]
  2061  0558  0020               	movlb	0	; select bank0
  2062  0559  01AC               	clrf	_seg_disp_sleep
  2063  055A  01AD               	clrf	_seg_disp_sleep+1
  2064                           
  2065                           ;interrupts.c: 45:     INT_FLAGS.seg_disp_sleep = 0;
  2066  055B  1037               	bcf	_INT_FLAGS,0	;volatile
  2067                           
  2068                           ;interrupts.c: 46:     INT_FLAGS.seg_disp_awake = 1;
  2069  055C  14B7               	bsf	_INT_FLAGS,1	;volatile
  2070  055D  0008               	return
  2071  055E                     __end_of_seg_disp_awake:	
  2072                           
  2073                           	psect	text4
  2074  055E                     __ptext4:	
  2075 ;; *************** function _increment *****************
  2076 ;; Defined at:
  2077 ;;		line 182 in file "counter_1512.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;		None
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;		None
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      void 
  2084 ;; Registers used:
  2085 ;;		wreg
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMMON   BANK0   BANK1
  2091 ;;      Params:         0       0       0
  2092 ;;      Locals:         0       0       0
  2093 ;;      Temps:          0       0       0
  2094 ;;      Totals:         0       0       0
  2095 ;;Total ram usage:        0 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    2
  2098 ;; This function calls:
  2099 ;;		Nothing
  2100 ;; This function is called by:
  2101 ;;		_update_switches
  2102 ;; This function uses a non-reentrant model
  2103 ;;
  2104                           
  2105                           
  2106                           ;psect for function _increment
  2107  055E                     _increment:	
  2108                           
  2109                           ;counter_1512.c: 183:     cur_val++;
  2110                           
  2111                           ;incstack = 0
  2112                           ; Regs used in _increment: [wreg]
  2113  055E  3001               	movlw	1
  2114  055F  0020               	movlb	0	; select bank0
  2115  0560  07B2               	addwf	_cur_val,f
  2116  0561  3000               	movlw	0
  2117  0562  3DB3               	addwfc	_cur_val+1,f
  2118  0563  0008               	return
  2119  0564                     __end_of_increment:	
  2120                           
  2121                           	psect	text5
  2122  04CF                     __ptext5:	
  2123 ;; *************** function _get_switch_toggle *****************
  2124 ;; Defined at:
  2125 ;;		line 51 in file "switches.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;  old_s_t         1    wreg     struct .
  2128 ;;  new_s_t         1    0[COMMON] struct .
  2129 ;; Auto vars:     Size  Location     Type
  2130 ;;  old_s_t         1    2[COMMON] struct .
  2131 ;;  val             1    3[COMMON] unsigned char 
  2132 ;; Return value:  Size  Location     Type
  2133 ;;                  1    wreg      unsigned char 
  2134 ;; Registers used:
  2135 ;;		wreg, status,2
  2136 ;; Tracked objects:
  2137 ;;		On entry : 0/0
  2138 ;;		On exit  : 0/0
  2139 ;;		Unchanged: 0/0
  2140 ;; Data sizes:     COMMON   BANK0   BANK1
  2141 ;;      Params:         1       0       0
  2142 ;;      Locals:         2       0       0
  2143 ;;      Temps:          1       0       0
  2144 ;;      Totals:         4       0       0
  2145 ;;Total ram usage:        4 bytes
  2146 ;; Hardware stack levels used:    1
  2147 ;; Hardware stack levels required when called:    2
  2148 ;; This function calls:
  2149 ;;		Nothing
  2150 ;; This function is called by:
  2151 ;;		_update_switches
  2152 ;; This function uses a non-reentrant model
  2153 ;;
  2154                           
  2155                           
  2156                           ;psect for function _get_switch_toggle
  2157  04CF                     _get_switch_toggle:	
  2158                           
  2159                           ;incstack = 0
  2160                           ; Regs used in _get_switch_toggle: [wreg+status,2]
  2161                           ;get_switch_toggle@old_s_t stored from wreg
  2162  04CF  00F2               	movwf	get_switch_toggle@old_s_t
  2163                           
  2164                           ;switches.c: 52:     uint8_t val = 0;
  2165  04D0  01F3               	clrf	get_switch_toggle@val
  2166                           
  2167                           ;switches.c: 53:     if (old_s_t.status != new_s_t.status && new_s_t.status == 1) val = 
      +                          1;
  2168  04D1  1FF0               	btfss	get_switch_toggle@new_s_t,7
  2169  04D2  2CD5               	goto	u2160
  2170  04D3  3001               	movlw	1
  2171  04D4  2CD6               	goto	u2162
  2172  04D5                     u2160:	
  2173  04D5  3000               	movlw	0
  2174  04D6                     u2162:	
  2175  04D6  00F1               	movwf	??_get_switch_toggle
  2176  04D7  1FF2               	btfss	get_switch_toggle@old_s_t,7
  2177  04D8  2CDB               	goto	u2170
  2178  04D9  3001               	movlw	1
  2179  04DA  2CDC               	goto	u2172
  2180  04DB                     u2170:	
  2181  04DB  3000               	movlw	0
  2182  04DC                     u2172:	
  2183  04DC  0671               	xorwf	??_get_switch_toggle,w
  2184  04DD  1D03               	btfss	3,2
  2185  04DE  1FF0               	btfss	get_switch_toggle@new_s_t,7
  2186  04DF  2CE2               	goto	l2082
  2187  04E0  01F3               	clrf	get_switch_toggle@val
  2188  04E1  0AF3               	incf	get_switch_toggle@val,f
  2189  04E2                     l2082:	
  2190                           
  2191                           ;switches.c: 54:     return val;
  2192  04E2  0873               	movf	get_switch_toggle@val,w
  2193  04E3  0008               	return
  2194  04E4                     __end_of_get_switch_toggle:	
  2195                           
  2196                           	psect	text6
  2197  056A                     __ptext6:	
  2198 ;; *************** function _get_switch_status *****************
  2199 ;; Defined at:
  2200 ;;		line 48 in file "switches.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;  s_t             1    wreg     struct .
  2203 ;; Auto vars:     Size  Location     Type
  2204 ;;  s_t             1    0[COMMON] struct .
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  1    wreg      unsigned char 
  2207 ;; Registers used:
  2208 ;;		wreg, status,2, status,0
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMMON   BANK0   BANK1
  2214 ;;      Params:         0       0       0
  2215 ;;      Locals:         1       0       0
  2216 ;;      Temps:          0       0       0
  2217 ;;      Totals:         1       0       0
  2218 ;;Total ram usage:        1 bytes
  2219 ;; Hardware stack levels used:    1
  2220 ;; Hardware stack levels required when called:    2
  2221 ;; This function calls:
  2222 ;;		Nothing
  2223 ;; This function is called by:
  2224 ;;		_update_switches
  2225 ;; This function uses a non-reentrant model
  2226 ;;
  2227                           
  2228                           
  2229                           ;psect for function _get_switch_status
  2230  056A                     _get_switch_status:	
  2231                           
  2232                           ;incstack = 0
  2233                           ; Regs used in _get_switch_status: [wreg+status,2+status,0]
  2234                           ;get_switch_status@s_t stored from wreg
  2235  056A  00F0               	movwf	get_switch_status@s_t
  2236                           
  2237                           ;switches.c: 49:     return s_t.status;
  2238  056B  0D70               	rlf	get_switch_status@s_t,w
  2239  056C  0D70               	rlf	get_switch_status@s_t,w
  2240  056D  3901               	andlw	1
  2241  056E  0008               	return
  2242  056F                     __end_of_get_switch_status:	
  2243                           
  2244                           	psect	text7
  2245  0564                     __ptext7:	
  2246 ;; *************** function _decrement *****************
  2247 ;; Defined at:
  2248 ;;		line 185 in file "counter_1512.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;		None
  2251 ;; Auto vars:     Size  Location     Type
  2252 ;;		None
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  1    wreg      void 
  2255 ;; Registers used:
  2256 ;;		wreg
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMMON   BANK0   BANK1
  2262 ;;      Params:         0       0       0
  2263 ;;      Locals:         0       0       0
  2264 ;;      Temps:          0       0       0
  2265 ;;      Totals:         0       0       0
  2266 ;;Total ram usage:        0 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; Hardware stack levels required when called:    2
  2269 ;; This function calls:
  2270 ;;		Nothing
  2271 ;; This function is called by:
  2272 ;;		_update_switches
  2273 ;; This function uses a non-reentrant model
  2274 ;;
  2275                           
  2276                           
  2277                           ;psect for function _decrement
  2278  0564                     _decrement:	
  2279                           
  2280                           ;counter_1512.c: 186:     cur_val--;
  2281                           
  2282                           ;incstack = 0
  2283                           ; Regs used in _decrement: [wreg]
  2284  0564  3001               	movlw	1
  2285  0565  0020               	movlb	0	; select bank0
  2286  0566  02B2               	subwf	_cur_val,f
  2287  0567  3000               	movlw	0
  2288  0568  3BB3               	subwfb	_cur_val+1,f
  2289  0569  0008               	return
  2290  056A                     __end_of_decrement:	
  2291                           
  2292                           	psect	text8
  2293  04E4                     __ptext8:	
  2294 ;; *************** function _change_category *****************
  2295 ;; Defined at:
  2296 ;;		line 189 in file "counter_1512.c"
  2297 ;; Parameters:    Size  Location     Type
  2298 ;;  category        1    wreg     unsigned char 
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;  category        1   13[COMMON] unsigned char 
  2301 ;; Return value:  Size  Location     Type
  2302 ;;                  1    wreg      void 
  2303 ;; Registers used:
  2304 ;;		wreg, status,2, status,0, pclath, cstack
  2305 ;; Tracked objects:
  2306 ;;		On entry : 0/0
  2307 ;;		On exit  : 0/0
  2308 ;;		Unchanged: 0/0
  2309 ;; Data sizes:     COMMON   BANK0   BANK1
  2310 ;;      Params:         0       0       0
  2311 ;;      Locals:         1       0       0
  2312 ;;      Temps:          1       0       0
  2313 ;;      Totals:         2       0       0
  2314 ;;Total ram usage:        2 bytes
  2315 ;; Hardware stack levels used:    1
  2316 ;; Hardware stack levels required when called:    4
  2317 ;; This function calls:
  2318 ;;		_get_cat_val
  2319 ;;		_set_cat_val
  2320 ;; This function is called by:
  2321 ;;		_main
  2322 ;;		_update_switches
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           
  2327                           ;psect for function _change_category
  2328  04E4                     _change_category:	
  2329                           
  2330                           ;incstack = 0
  2331                           ; Regs used in _change_category: [wreg+status,2+status,0+pclath+cstack]
  2332                           ;change_category@category stored from wreg
  2333  04E4  00FD               	movwf	change_category@category
  2334                           
  2335                           ;counter_1512.c: 190:     set_cat_val (cur_cat, cur_val);
  2336  04E5  0020               	movlb	0	; select bank0
  2337  04E6  0833               	movf	_cur_val+1,w
  2338  04E7  00F8               	movwf	set_cat_val@val+1
  2339  04E8  0832               	movf	_cur_val,w
  2340  04E9  00F7               	movwf	set_cat_val@val
  2341  04EA  0836               	movf	_cur_cat,w
  2342  04EB  2329               	fcall	_set_cat_val
  2343                           
  2344                           ;counter_1512.c: 191:     cur_cat = category;
  2345  04EC  087D               	movf	change_category@category,w
  2346  04ED  00FC               	movwf	??_change_category
  2347  04EE  087C               	movf	??_change_category,w
  2348  04EF  0020               	movlb	0	; select bank0
  2349  04F0  00B6               	movwf	_cur_cat
  2350                           
  2351                           ;counter_1512.c: 192:     cur_val = get_cat_val(cur_cat);
  2352  04F1  0836               	movf	_cur_cat,w
  2353  04F2  2252               	fcall	_get_cat_val
  2354  04F3  0878               	movf	?_get_cat_val+1,w
  2355  04F4  0020               	movlb	0	; select bank0
  2356  04F5  00B3               	movwf	_cur_val+1
  2357  04F6  0877               	movf	?_get_cat_val,w
  2358  04F7  00B2               	movwf	_cur_val
  2359  04F8  0008               	return
  2360  04F9                     __end_of_change_category:	
  2361                           
  2362                           	psect	text9
  2363  0252                     __ptext9:	
  2364 ;; *************** function _get_cat_val *****************
  2365 ;; Defined at:
  2366 ;;		line 146 in file "counter_1512.c"
  2367 ;; Parameters:    Size  Location     Type
  2368 ;;  category        1    wreg     unsigned char 
  2369 ;; Auto vars:     Size  Location     Type
  2370 ;;  category        1    2[BANK0 ] unsigned char 
  2371 ;;  d               1    5[BANK0 ] unsigned char 
  2372 ;;  i               1    6[BANK0 ] unsigned char 
  2373 ;;  val             2    3[BANK0 ] unsigned short 
  2374 ;;  add_start       2    0[BANK0 ] unsigned short 
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  2    7[COMMON] unsigned short 
  2377 ;; Registers used:
  2378 ;;		wreg, status,2, status,0, pclath, cstack
  2379 ;; Tracked objects:
  2380 ;;		On entry : 0/0
  2381 ;;		On exit  : 0/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMMON   BANK0   BANK1
  2384 ;;      Params:         2       0       0
  2385 ;;      Locals:         0       7       0
  2386 ;;      Temps:          3       0       0
  2387 ;;      Totals:         5       7       0
  2388 ;;Total ram usage:       12 bytes
  2389 ;; Hardware stack levels used:    1
  2390 ;; Hardware stack levels required when called:    3
  2391 ;; This function calls:
  2392 ;;		_eeprom_read_16
  2393 ;; This function is called by:
  2394 ;;		_main
  2395 ;;		_change_category
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           
  2400                           ;psect for function _get_cat_val
  2401  0252                     _get_cat_val:	
  2402                           
  2403                           ;incstack = 0
  2404                           ; Regs used in _get_cat_val: [wreg+status,2+status,0+pclath+cstack]
  2405                           ;get_cat_val@category stored from wreg
  2406  0252  0020               	movlb	0	; select bank0
  2407  0253  00C6               	movwf	get_cat_val@category
  2408                           
  2409                           ;counter_1512.c: 147:     if (cur_cat > 2 - 1) return -1;
  2410  0254  3002               	movlw	2
  2411  0255  0236               	subwf	_cur_cat,w
  2412  0256  1C03               	skipc
  2413  0257  2A5D               	goto	l1920
  2414  0258  30FF               	movlw	255
  2415  0259  00F7               	movwf	?_get_cat_val
  2416  025A  30FF               	movlw	255
  2417  025B  00F8               	movwf	?_get_cat_val+1
  2418  025C  0008               	return
  2419  025D                     l1920:	
  2420                           
  2421                           ;counter_1512.c: 150:     uint16_t val = 0;
  2422  025D  01C7               	clrf	get_cat_val@val
  2423  025E  01C8               	clrf	get_cat_val@val+1
  2424                           
  2425                           ;counter_1512.c: 151:     uint16_t add_start = 0x0450 + (2 * category);
  2426  025F  0846               	movf	get_cat_val@category,w
  2427  0260  00F9               	movwf	??_get_cat_val
  2428  0261  01FA               	clrf	??_get_cat_val+1
  2429  0262  35F9               	lslf	??_get_cat_val,f
  2430  0263  0DFA               	rlf	??_get_cat_val+1,f
  2431  0264  0879               	movf	??_get_cat_val,w
  2432  0265  3E50               	addlw	80
  2433  0266  00C4               	movwf	get_cat_val@add_start
  2434  0267  3004               	movlw	4
  2435  0268  3D7A               	addwfc	??_get_cat_val+1,w
  2436  0269  00C5               	movwf	get_cat_val@add_start+1
  2437                           
  2438                           ;counter_1512.c: 153:     for (uint8_t i = 0; i < 2; i ++){
  2439  026A  01CA               	clrf	get_cat_val@i
  2440  026B                     l1930:	
  2441                           
  2442                           ;counter_1512.c: 154:         _delay((unsigned long)((5)*(8000000/4000.0)));
  2443  026B  300D               	movlw	13
  2444  026C  00F9               	movwf	??_get_cat_val
  2445  026D  30FC               	movlw	252
  2446  026E                     u2687:	
  2447  026E  0B89               	decfsz	9,f
  2448  026F  2A6E               	goto	u2687
  2449  0270  0BF9               	decfsz	??_get_cat_val,f
  2450  0271  2A6E               	goto	u2687
  2451                           
  2452                           ;counter_1512.c: 155:         uint8_t d = eeprom_read_16 (0xA0, add_start + i);
  2453  0272  0020               	movlb	0	; select bank0
  2454  0273  084A               	movf	get_cat_val@i,w
  2455  0274  0744               	addwf	get_cat_val@add_start,w
  2456  0275  00F0               	movwf	eeprom_read_16@add
  2457  0276  0845               	movf	get_cat_val@add_start+1,w
  2458  0277  1803               	skipnc
  2459  0278  0A45               	incf	get_cat_val@add_start+1,w
  2460  0279  00F1               	movwf	eeprom_read_16@add+1
  2461  027A  30A0               	movlw	160
  2462  027B  21F3               	fcall	_eeprom_read_16
  2463  027C  00F9               	movwf	??_get_cat_val
  2464  027D  0879               	movf	??_get_cat_val,w
  2465  027E  0020               	movlb	0	; select bank0
  2466  027F  00C9               	movwf	get_cat_val@d
  2467                           
  2468                           ;counter_1512.c: 156:         val |= d << (8 * i);
  2469  0280  0849               	movf	get_cat_val@d,w
  2470  0281  00F9               	movwf	??_get_cat_val
  2471  0282  01FA               	clrf	??_get_cat_val+1
  2472  0283  084A               	movf	get_cat_val@i,w
  2473  0284  00FB               	movwf	??_get_cat_val+2
  2474  0285  3002               	movlw	2
  2475  0286                     u1895:	
  2476  0286  35FB               	lslf	??_get_cat_val+2,f
  2477  0287  3EFF               	addlw	-1
  2478  0288  1D03               	skipz
  2479  0289  2A86               	goto	u1895
  2480  028A  357B               	lslf	??_get_cat_val+2,w
  2481  028B  0A89               	incf	9,f
  2482  028C  2A8F               	goto	u1904
  2483  028D                     u1905:	
  2484  028D  35F9               	lslf	??_get_cat_val,f
  2485  028E  0DFA               	rlf	??_get_cat_val+1,f
  2486  028F                     u1904:	
  2487  028F  0B89               	decfsz	9,f
  2488  0290  2A8D               	goto	u1905
  2489  0291  0879               	movf	??_get_cat_val,w
  2490  0292  04C7               	iorwf	get_cat_val@val,f
  2491  0293  087A               	movf	??_get_cat_val+1,w
  2492  0294  04C8               	iorwf	get_cat_val@val+1,f
  2493                           
  2494                           ;counter_1512.c: 157:     }
  2495  0295  3001               	movlw	1
  2496  0296  00F9               	movwf	??_get_cat_val
  2497  0297  0879               	movf	??_get_cat_val,w
  2498  0298  07CA               	addwf	get_cat_val@i,f
  2499  0299  3002               	movlw	2
  2500  029A  024A               	subwf	get_cat_val@i,w
  2501  029B  1C03               	skipc
  2502  029C  2A6B               	goto	l1930
  2503                           
  2504                           ;counter_1512.c: 159:     return val;
  2505  029D  0848               	movf	get_cat_val@val+1,w
  2506  029E  00F8               	movwf	?_get_cat_val+1
  2507  029F  0847               	movf	get_cat_val@val,w
  2508  02A0  00F7               	movwf	?_get_cat_val
  2509  02A1  0008               	return
  2510  02A2                     __end_of_get_cat_val:	
  2511                           
  2512                           	psect	text10
  2513  01F3                     __ptext10:	
  2514 ;; *************** function _eeprom_read_16 *****************
  2515 ;; Defined at:
  2516 ;;		line 156 in file "i2c_eeprom.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  slaveAdd        1    wreg     unsigned char 
  2519 ;;  add             2    0[COMMON] unsigned short 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  slaveAdd        1    6[COMMON] unsigned char 
  2522 ;;  tempData        1    5[COMMON] unsigned char 
  2523 ;;  addLow          1    4[COMMON] unsigned char 
  2524 ;;  addHigh         1    3[COMMON] unsigned char 
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  1    wreg      unsigned char 
  2527 ;; Registers used:
  2528 ;;		wreg, status,2, status,0
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMMON   BANK0   BANK1
  2534 ;;      Params:         2       0       0
  2535 ;;      Locals:         4       0       0
  2536 ;;      Temps:          1       0       0
  2537 ;;      Totals:         7       0       0
  2538 ;;Total ram usage:        7 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    2
  2541 ;; This function calls:
  2542 ;;		Nothing
  2543 ;; This function is called by:
  2544 ;;		_main
  2545 ;;		_get_cat_val
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           
  2550                           ;psect for function _eeprom_read_16
  2551  01F3                     _eeprom_read_16:	
  2552                           
  2553                           ;incstack = 0
  2554                           ; Regs used in _eeprom_read_16: [wreg+status,2+status,0]
  2555                           ;eeprom_read_16@slaveAdd stored from wreg
  2556  01F3  00F6               	movwf	eeprom_read_16@slaveAdd
  2557                           
  2558                           ;i2c_eeprom.c: 157:     uint8_t addHigh = add >> 8;
  2559  01F4  0871               	movf	eeprom_read_16@add+1,w
  2560  01F5  00F2               	movwf	??_eeprom_read_16
  2561  01F6  0872               	movf	??_eeprom_read_16,w
  2562  01F7  00F3               	movwf	eeprom_read_16@addHigh
  2563                           
  2564                           ;i2c_eeprom.c: 158:     uint8_t addLow = add;
  2565  01F8  0870               	movf	eeprom_read_16@add,w
  2566  01F9  00F2               	movwf	??_eeprom_read_16
  2567  01FA  0872               	movf	??_eeprom_read_16,w
  2568  01FB  00F4               	movwf	eeprom_read_16@addLow
  2569                           
  2570                           ;i2c_eeprom.c: 159:     uint8_t tempData;;i2c_eeprom.c: 161:     SSPCON2bits.SEN = 1;
  2571  01FC  0024               	movlb	4	; select bank4
  2572  01FD  1416               	bsf	22,0	;volatile
  2573  01FE                     l382:	
  2574                           ;i2c_eeprom.c: 162:     while (SEN);
  2575                           
  2576  01FE  1816               	btfsc	22,0	;volatile
  2577  01FF  29FE               	goto	l382
  2578                           
  2579                           ;i2c_eeprom.c: 163:     PIR1bits.SSPIF = 0;
  2580  0200  0020               	movlb	0	; select bank0
  2581  0201  1191               	bcf	17,3	;volatile
  2582                           
  2583                           ;i2c_eeprom.c: 164:     SSPBUF = slaveAdd;
  2584  0202  0876               	movf	eeprom_read_16@slaveAdd,w
  2585  0203  0024               	movlb	4	; select bank4
  2586  0204  0091               	movwf	17	;volatile
  2587  0205                     l385:	
  2588                           ;i2c_eeprom.c: 165:     while (!SSPIF);
  2589                           
  2590  0205  0020               	movlb	0	; select bank0
  2591  0206  1D91               	btfss	17,3	;volatile
  2592  0207  2A05               	goto	l385
  2593                           
  2594                           ;i2c_eeprom.c: 166:     PIR1bits.SSPIF = 0;
  2595  0208  1191               	bcf	17,3	;volatile
  2596                           
  2597                           ;i2c_eeprom.c: 167:     if (SSPCON2bits.ACKSTAT) {
  2598  0209  0024               	movlb	4	; select bank4
  2599  020A  1F16               	btfss	22,6	;volatile
  2600  020B  2A11               	goto	l1860
  2601                           
  2602                           ;i2c_eeprom.c: 168:         SSPCON2bits.PEN = 1;
  2603  020C  1516               	bsf	22,2	;volatile
  2604  020D                     l389:	
  2605                           ;i2c_eeprom.c: 169:         while (PEN);
  2606                           
  2607  020D  1916               	btfsc	22,2	;volatile
  2608  020E  2A0D               	goto	l389
  2609                           
  2610                           ;i2c_eeprom.c: 170:         return (0xFB);
  2611  020F  30FB               	movlw	251
  2612  0210  0008               	return
  2613  0211                     l1860:	
  2614                           
  2615                           ;i2c_eeprom.c: 173:     SSPBUF = addHigh;
  2616  0211  0873               	movf	eeprom_read_16@addHigh,w
  2617  0212  0091               	movwf	17	;volatile
  2618  0213                     l393:	
  2619                           ;i2c_eeprom.c: 174:     while (!SSPIF);
  2620                           
  2621  0213  0020               	movlb	0	; select bank0
  2622  0214  1D91               	btfss	17,3	;volatile
  2623  0215  2A13               	goto	l393
  2624                           
  2625                           ;i2c_eeprom.c: 175:     PIR1bits.SSPIF = 0;
  2626  0216  1191               	bcf	17,3	;volatile
  2627                           
  2628                           ;i2c_eeprom.c: 176:     if (SSPCON2bits.ACKSTAT) {
  2629  0217  0024               	movlb	4	; select bank4
  2630  0218  1F16               	btfss	22,6	;volatile
  2631  0219  2A1F               	goto	l1868
  2632                           
  2633                           ;i2c_eeprom.c: 177:         SSPCON2bits.PEN = 1;
  2634  021A  1516               	bsf	22,2	;volatile
  2635  021B                     l397:	
  2636                           ;i2c_eeprom.c: 178:         while (PEN);
  2637                           
  2638  021B  1916               	btfsc	22,2	;volatile
  2639  021C  2A1B               	goto	l397
  2640                           
  2641                           ;i2c_eeprom.c: 179:         return (0xFE);
  2642  021D  30FE               	movlw	254
  2643  021E  0008               	return
  2644  021F                     l1868:	
  2645                           
  2646                           ;i2c_eeprom.c: 182:     SSPBUF = addLow;
  2647  021F  0874               	movf	eeprom_read_16@addLow,w
  2648  0220  0091               	movwf	17	;volatile
  2649  0221                     l400:	
  2650                           ;i2c_eeprom.c: 183:     while (!SSPIF);
  2651                           
  2652  0221  0020               	movlb	0	; select bank0
  2653  0222  1D91               	btfss	17,3	;volatile
  2654  0223  2A21               	goto	l400
  2655                           
  2656                           ;i2c_eeprom.c: 184:     PIR1bits.SSPIF = 0;
  2657  0224  1191               	bcf	17,3	;volatile
  2658                           
  2659                           ;i2c_eeprom.c: 185:     if (SSPCON2bits.ACKSTAT) {
  2660  0225  0024               	movlb	4	; select bank4
  2661  0226  1F16               	btfss	22,6	;volatile
  2662  0227  2A2D               	goto	l403
  2663                           
  2664                           ;i2c_eeprom.c: 186:         SSPCON2bits.PEN = 1;
  2665  0228  1516               	bsf	22,2	;volatile
  2666  0229                     l404:	
  2667                           ;i2c_eeprom.c: 187:         while (PEN);
  2668                           
  2669  0229  1916               	btfsc	22,2	;volatile
  2670  022A  2A29               	goto	l404
  2671                           
  2672                           ;i2c_eeprom.c: 188:         return (0xFD);
  2673  022B  30FD               	movlw	253
  2674  022C  0008               	return
  2675  022D                     l403:	
  2676                           ;i2c_eeprom.c: 189:     }
  2677                           
  2678                           
  2679                           ;i2c_eeprom.c: 191:     SSPCON2bits.RSEN = 1;
  2680  022D  1496               	bsf	22,1	;volatile
  2681  022E                     l407:	
  2682                           ;i2c_eeprom.c: 192:     while (RSEN);
  2683                           
  2684  022E  1896               	btfsc	22,1	;volatile
  2685  022F  2A2E               	goto	l407
  2686                           
  2687                           ;i2c_eeprom.c: 193:     PIR1bits.SSPIF = 0;
  2688  0230  0020               	movlb	0	; select bank0
  2689  0231  1191               	bcf	17,3	;volatile
  2690                           
  2691                           ;i2c_eeprom.c: 195:     SSPBUF = (slaveAdd+1);
  2692  0232  0876               	movf	eeprom_read_16@slaveAdd,w
  2693  0233  3E01               	addlw	1
  2694  0234  0024               	movlb	4	; select bank4
  2695  0235  0091               	movwf	17	;volatile
  2696  0236                     l410:	
  2697                           ;i2c_eeprom.c: 196:     while (!SSPIF);
  2698                           
  2699  0236  0020               	movlb	0	; select bank0
  2700  0237  1D91               	btfss	17,3	;volatile
  2701  0238  2A36               	goto	l410
  2702                           
  2703                           ;i2c_eeprom.c: 197:     PIR1bits.SSPIF = 0;
  2704  0239  1191               	bcf	17,3	;volatile
  2705                           
  2706                           ;i2c_eeprom.c: 198:     if (SSPCON2bits.ACKSTAT) {
  2707  023A  0024               	movlb	4	; select bank4
  2708  023B  1F16               	btfss	22,6	;volatile
  2709  023C  2A42               	goto	l413
  2710                           
  2711                           ;i2c_eeprom.c: 199:         SSPCON2bits.PEN = 1;
  2712  023D  1516               	bsf	22,2	;volatile
  2713  023E                     l414:	
  2714                           ;i2c_eeprom.c: 200:         while (PEN);
  2715                           
  2716  023E  1916               	btfsc	22,2	;volatile
  2717  023F  2A3E               	goto	l414
  2718                           
  2719                           ;i2c_eeprom.c: 201:         return (0xFC);
  2720  0240  30FC               	movlw	252
  2721  0241  0008               	return
  2722  0242                     l413:	
  2723                           ;i2c_eeprom.c: 202:     }
  2724                           
  2725                           
  2726                           ;i2c_eeprom.c: 204:     SSPCON2bits.RCEN = 1;
  2727  0242  1596               	bsf	22,3	;volatile
  2728  0243                     l417:	
  2729                           ;i2c_eeprom.c: 205:     while (!SSPSTATbits.BF);
  2730                           
  2731  0243  1C14               	btfss	20,0	;volatile
  2732  0244  2A43               	goto	l417
  2733                           
  2734                           ;i2c_eeprom.c: 206:     tempData = SSPBUF;
  2735  0245  0811               	movf	17,w	;volatile
  2736  0246  00F2               	movwf	??_eeprom_read_16
  2737  0247  0872               	movf	??_eeprom_read_16,w
  2738  0248  00F5               	movwf	eeprom_read_16@tempData
  2739                           
  2740                           ;i2c_eeprom.c: 208:     SSPCON2bits.ACKDT = 1;
  2741  0249  1696               	bsf	22,5	;volatile
  2742                           
  2743                           ;i2c_eeprom.c: 209:     SSPCON2bits.ACKEN = 1;
  2744  024A  1616               	bsf	22,4	;volatile
  2745  024B                     l420:	
  2746                           ;i2c_eeprom.c: 210:     while (ACKEN);
  2747                           
  2748  024B  1A16               	btfsc	22,4	;volatile
  2749  024C  2A4B               	goto	l420
  2750                           
  2751                           ;i2c_eeprom.c: 212:     SSPCON2bits.PEN = 1;
  2752  024D  1516               	bsf	22,2	;volatile
  2753  024E                     l423:	
  2754                           ;i2c_eeprom.c: 213:     while(PEN);
  2755                           
  2756  024E  1916               	btfsc	22,2	;volatile
  2757  024F  2A4E               	goto	l423
  2758                           
  2759                           ;i2c_eeprom.c: 214:     return tempData;
  2760  0250  0875               	movf	eeprom_read_16@tempData,w
  2761  0251  0008               	return
  2762  0252                     __end_of_eeprom_read_16:	
  2763                           
  2764                           	psect	text11
  2765  0535                     __ptext11:	
  2766 ;; *************** function _update_seg_disp_47 *****************
  2767 ;; Defined at:
  2768 ;;		line 141 in file "segmentdisplay47.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;  s_t             1    wreg     PTR struct .
  2771 ;;		 -> NULL(0), v_disp(3), 
  2772 ;;  cur_val         2    5[COMMON] unsigned short 
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;  s_t             1    7[COMMON] PTR struct .
  2775 ;;		 -> NULL(0), v_disp(3), 
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      void 
  2778 ;; Registers used:
  2779 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMMON   BANK0   BANK1
  2785 ;;      Params:         2       0       0
  2786 ;;      Locals:         1       0       0
  2787 ;;      Temps:          0       0       0
  2788 ;;      Totals:         3       0       0
  2789 ;;Total ram usage:        3 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:    3
  2792 ;; This function calls:
  2793 ;;		_seg_disp_47_set_val
  2794 ;; This function is called by:
  2795 ;;		_main
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           
  2800                           ;psect for function _update_seg_disp_47
  2801  0535                     _update_seg_disp_47:	
  2802                           
  2803                           ;incstack = 0
  2804                           ; Regs used in _update_seg_disp_47: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2805                           ;update_seg_disp_47@s_t stored from wreg
  2806  0535  00F7               	movwf	update_seg_disp_47@s_t
  2807                           
  2808                           ;segmentdisplay47.c: 142:     seg_disp_47_set_val (s_t, cur_val);
  2809  0536  0876               	movf	update_seg_disp_47@cur_val+1,w
  2810  0537  00F1               	movwf	seg_disp_47_set_val@value+1
  2811  0538  0875               	movf	update_seg_disp_47@cur_val,w
  2812  0539  00F0               	movwf	seg_disp_47_set_val@value
  2813  053A  0877               	movf	update_seg_disp_47@s_t,w
  2814  053B  24A0               	fcall	_seg_disp_47_set_val
  2815  053C  0008               	return
  2816  053D                     __end_of_update_seg_disp_47:	
  2817                           
  2818                           	psect	text12
  2819  04A0                     __ptext12:	
  2820 ;; *************** function _seg_disp_47_set_val *****************
  2821 ;; Defined at:
  2822 ;;		line 152 in file "segmentdisplay47.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;  s_t             1    wreg     PTR struct .
  2825 ;;		 -> NULL(0), v_disp(3), 
  2826 ;;  value           2    0[COMMON] unsigned short 
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;  s_t             1    4[COMMON] PTR struct .
  2829 ;;		 -> NULL(0), v_disp(3), 
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  1    wreg      void 
  2832 ;; Registers used:
  2833 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMMON   BANK0   BANK1
  2839 ;;      Params:         2       0       0
  2840 ;;      Locals:         1       0       0
  2841 ;;      Temps:          2       0       0
  2842 ;;      Totals:         5       0       0
  2843 ;;Total ram usage:        5 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; Hardware stack levels required when called:    2
  2846 ;; This function calls:
  2847 ;;		Nothing
  2848 ;; This function is called by:
  2849 ;;		_update_seg_disp_47
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           
  2854                           ;psect for function _seg_disp_47_set_val
  2855  04A0                     _seg_disp_47_set_val:	
  2856                           
  2857                           ;incstack = 0
  2858                           ; Regs used in _seg_disp_47_set_val: [wreg+fsr1l+fsr1h+status,2+status,0]
  2859                           ;seg_disp_47_set_val@s_t stored from wreg
  2860  04A0  00F4               	movwf	seg_disp_47_set_val@s_t
  2861                           
  2862                           ;segmentdisplay47.c: 153:     s_t->value_lo = value;
  2863  04A1  0870               	movf	seg_disp_47_set_val@value,w
  2864  04A2  00F2               	movwf	??_seg_disp_47_set_val
  2865  04A3  0A74               	incf	seg_disp_47_set_val@s_t,w
  2866  04A4  0086               	movwf	6
  2867  04A5  0187               	clrf	7
  2868  04A6  0872               	movf	??_seg_disp_47_set_val,w
  2869  04A7  0081               	movwf	1
  2870                           
  2871                           ;segmentdisplay47.c: 154:     s_t->value_hi = value >> 8;
  2872  04A8  0871               	movf	seg_disp_47_set_val@value+1,w
  2873  04A9  00F3               	movwf	??_seg_disp_47_set_val+1
  2874  04AA  0870               	movf	seg_disp_47_set_val@value,w
  2875  04AB  00F2               	movwf	??_seg_disp_47_set_val
  2876  04AC  0873               	movf	??_seg_disp_47_set_val+1,w
  2877  04AD  00F2               	movwf	??_seg_disp_47_set_val
  2878  04AE  01F3               	clrf	??_seg_disp_47_set_val+1
  2879  04AF  0874               	movf	seg_disp_47_set_val@s_t,w
  2880  04B0  3E02               	addlw	2
  2881  04B1  0086               	movwf	6
  2882  04B2  0187               	clrf	7
  2883  04B3  0801               	movf	1,w
  2884  04B4  0672               	xorwf	??_seg_disp_47_set_val,w
  2885  04B5  39C0               	andlw	-64
  2886  04B6  0672               	xorwf	??_seg_disp_47_set_val,w
  2887  04B7  0081               	movwf	1
  2888  04B8  0008               	return
  2889  04B9                     __end_of_seg_disp_47_set_val:	
  2890                           
  2891                           	psect	text13
  2892  044D                     __ptext13:	
  2893 ;; *************** function _update_int_flags *****************
  2894 ;; Defined at:
  2895 ;;		line 119 in file "counter_1512.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;		None
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;		None
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      void 
  2902 ;; Registers used:
  2903 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMMON   BANK0   BANK1
  2909 ;;      Params:         0       0       0
  2910 ;;      Locals:         0       0       0
  2911 ;;      Temps:          0       0       0
  2912 ;;      Totals:         0       0       0
  2913 ;;Total ram usage:        0 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; Hardware stack levels required when called:    5
  2916 ;; This function calls:
  2917 ;;		_cat_auto_save
  2918 ;;		_seg_disp_47_off
  2919 ;;		_seg_disp_47_on
  2920 ;;		_vis_next_digit
  2921 ;; This function is called by:
  2922 ;;		_main
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           
  2927                           ;psect for function _update_int_flags
  2928  044D                     _update_int_flags:	
  2929                           
  2930                           ;counter_1512.c: 122:     if (INT_FLAGS.seg_disp_sleep){
  2931                           
  2932                           ;incstack = 0
  2933                           ; Regs used in _update_int_flags: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2934  044D  0020               	movlb	0	; select bank0
  2935  044E  1C37               	btfss	_INT_FLAGS,0	;volatile
  2936  044F  2C54               	goto	l2304
  2937                           
  2938                           ;counter_1512.c: 123:         seg_disp_47_off (p_disp);
  2939  0450  0852               	movf	_p_disp,w
  2940  0451  2522               	fcall	_seg_disp_47_off
  2941                           
  2942                           ;counter_1512.c: 124:         INT_FLAGS.seg_disp_sleep = 0;
  2943  0452  0020               	movlb	0	; select bank0
  2944  0453  1037               	bcf	_INT_FLAGS,0	;volatile
  2945  0454                     l2304:	
  2946                           
  2947                           ;counter_1512.c: 127:     if (INT_FLAGS.seg_disp_awake && v_disp.status == 0){
  2948  0454  18B7               	btfsc	_INT_FLAGS,1	;volatile
  2949  0455  1B43               	btfsc	_v_disp+2,6
  2950  0456  2C5B               	goto	l2312
  2951                           
  2952                           ;counter_1512.c: 128:         seg_disp_47_on (p_disp);
  2953  0457  0852               	movf	_p_disp,w
  2954  0458  253D               	fcall	_seg_disp_47_on
  2955                           
  2956                           ;counter_1512.c: 129:         INT_FLAGS.seg_disp_awake = 0;
  2957  0459  0020               	movlb	0	; select bank0
  2958  045A  10B7               	bcf	_INT_FLAGS,1	;volatile
  2959  045B                     l2312:	
  2960                           
  2961                           ;counter_1512.c: 132:     if (INT_FLAGS.seg_disp_vis){
  2962  045B  1D37               	btfss	_INT_FLAGS,2	;volatile
  2963  045C  2C61               	goto	l2318
  2964                           
  2965                           ;counter_1512.c: 133:         vis_next_digit (p_disp);
  2966  045D  0852               	movf	_p_disp,w
  2967  045E  20DD               	fcall	_vis_next_digit
  2968                           
  2969                           ;counter_1512.c: 134:         INT_FLAGS.seg_disp_vis = 0;
  2970  045F  0020               	movlb	0	; select bank0
  2971  0460  1137               	bcf	_INT_FLAGS,2	;volatile
  2972  0461                     l2318:	
  2973                           
  2974                           ;counter_1512.c: 137:     if (INT_FLAGS.seg_disp_save && v_disp.status == 1){
  2975  0461  1DB7               	btfss	_INT_FLAGS,3	;volatile
  2976  0462  0008               	return
  2977  0463  1F43               	btfss	_v_disp+2,6
  2978  0464  0008               	return
  2979                           
  2980                           ;counter_1512.c: 138:         cat_auto_save();
  2981  0465  2469               	fcall	_cat_auto_save
  2982                           
  2983                           ;counter_1512.c: 139:         INT_FLAGS.seg_disp_save = 0;
  2984  0466  0020               	movlb	0	; select bank0
  2985  0467  11B7               	bcf	_INT_FLAGS,3	;volatile
  2986  0468  0008               	return
  2987  0469                     __end_of_update_int_flags:	
  2988                           
  2989                           	psect	text14
  2990  00DD                     __ptext14:	
  2991 ;; *************** function _vis_next_digit *****************
  2992 ;; Defined at:
  2993 ;;		line 73 in file "segmentdisplay47.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;  s_t             1    wreg     PTR struct .
  2996 ;;		 -> NULL(0), v_disp(3), 
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;  s_t             1   10[BANK0 ] PTR struct .
  2999 ;;		 -> NULL(0), v_disp(3), 
  3000 ;;  p               1    7[BANK0 ] unsigned char 
  3001 ;;  digit_divide    2    8[BANK0 ] unsigned short 
  3002 ;;  val             2    3[BANK0 ] unsigned short 
  3003 ;;  sLATB           1    6[BANK0 ] unsigned char 
  3004 ;;  digit_val       1    5[BANK0 ] unsigned char 
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  1    wreg      void 
  3007 ;; Registers used:
  3008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMMON   BANK0   BANK1
  3014 ;;      Params:         0       0       0
  3015 ;;      Locals:         0       8       0
  3016 ;;      Temps:          0       3       0
  3017 ;;      Totals:         0      11       0
  3018 ;;Total ram usage:       11 bytes
  3019 ;; Hardware stack levels used:    1
  3020 ;; Hardware stack levels required when called:    3
  3021 ;; This function calls:
  3022 ;;		___lwdiv
  3023 ;;		___lwmod
  3024 ;;		___wmul
  3025 ;;		_seg_disp_47_get_val
  3026 ;; This function is called by:
  3027 ;;		_update_int_flags
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           
  3032                           ;psect for function _vis_next_digit
  3033  00DD                     _vis_next_digit:	
  3034                           
  3035                           ;incstack = 0
  3036                           ; Regs used in _vis_next_digit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3037                           ;vis_next_digit@s_t stored from wreg
  3038  00DD  0020               	movlb	0	; select bank0
  3039  00DE  00CE               	movwf	vis_next_digit@s_t
  3040                           
  3041                           ;segmentdisplay47.c: 75:     if (!s_t->status){
  3042  00DF  084E               	movf	vis_next_digit@s_t,w
  3043  00E0  3E02               	addlw	2
  3044  00E1  0086               	movwf	6
  3045  00E2  0187               	clrf	7
  3046  00E3  1F01               	btfss	1,6
  3047  00E4  0008               	return
  3048                           
  3049                           ;segmentdisplay47.c: 79:     uint16_t val = seg_disp_47_get_val(s_t);
  3050  00E5  084E               	movf	vis_next_digit@s_t,w
  3051  00E6  23F0               	fcall	_seg_disp_47_get_val
  3052  00E7  0871               	movf	?_seg_disp_47_get_val+1,w
  3053  00E8  0020               	movlb	0	; select bank0
  3054  00E9  00C8               	movwf	vis_next_digit@val+1
  3055  00EA  0870               	movf	?_seg_disp_47_get_val,w
  3056  00EB  00C7               	movwf	vis_next_digit@val
  3057                           
  3058                           ;segmentdisplay47.c: 80:     uint16_t digit_divider = 1;
  3059  00EC  3001               	movlw	1
  3060  00ED  00CC               	movwf	vis_next_digit@digit_divider
  3061  00EE  3000               	movlw	0
  3062  00EF  00CD               	movwf	vis_next_digit@digit_divider+1
  3063                           
  3064                           ;segmentdisplay47.c: 81:     for (uint8_t p = 0; p < s_t->digit; p++) {
  3065  00F0  01CB               	clrf	vis_next_digit@p
  3066  00F1                     l2120:	
  3067  00F1  084E               	movf	vis_next_digit@s_t,w
  3068  00F2  0086               	movwf	6
  3069  00F3  0187               	clrf	7
  3070  00F4  0801               	movf	1,w
  3071  00F5  3903               	andlw	3
  3072  00F6  024B               	subwf	vis_next_digit@p,w
  3073  00F7  1803               	btfsc	3,0
  3074  00F8  290C               	goto	l2122
  3075                           
  3076                           ;segmentdisplay47.c: 82:         digit_divider *= 10;
  3077  00F9  300A               	movlw	10
  3078  00FA  00F0               	movwf	___wmul@multiplier
  3079  00FB  3000               	movlw	0
  3080  00FC  00F1               	movwf	___wmul@multiplier+1
  3081  00FD  084D               	movf	vis_next_digit@digit_divider+1,w
  3082  00FE  00F3               	movwf	___wmul@multiplicand+1
  3083  00FF  084C               	movf	vis_next_digit@digit_divider,w
  3084  0100  00F2               	movwf	___wmul@multiplicand
  3085  0101  2485               	fcall	___wmul
  3086  0102  0871               	movf	?___wmul+1,w
  3087  0103  0020               	movlb	0	; select bank0
  3088  0104  00CD               	movwf	vis_next_digit@digit_divider+1
  3089  0105  0870               	movf	?___wmul,w
  3090  0106  00CC               	movwf	vis_next_digit@digit_divider
  3091                           
  3092                           ;segmentdisplay47.c: 83:     }
  3093  0107  3001               	movlw	1
  3094  0108  00C4               	movwf	??_vis_next_digit
  3095  0109  0844               	movf	??_vis_next_digit,w
  3096  010A  07CB               	addwf	vis_next_digit@p,f
  3097  010B  28F1               	goto	l2120
  3098  010C                     l2122:	
  3099                           
  3100                           ;segmentdisplay47.c: 85:     uint8_t digit_val = ( val / digit_divider ) % 10;
  3101  010C  300A               	movlw	10
  3102  010D  00F8               	movwf	___lwmod@divisor
  3103  010E  3000               	movlw	0
  3104  010F  00F9               	movwf	___lwmod@divisor+1
  3105  0110  084D               	movf	vis_next_digit@digit_divider+1,w
  3106  0111  00F1               	movwf	___lwdiv@divisor+1
  3107  0112  084C               	movf	vis_next_digit@digit_divider,w
  3108  0113  00F0               	movwf	___lwdiv@divisor
  3109  0114  0848               	movf	vis_next_digit@val+1,w
  3110  0115  00F3               	movwf	___lwdiv@dividend+1
  3111  0116  0847               	movf	vis_next_digit@val,w
  3112  0117  00F2               	movwf	___lwdiv@dividend
  3113  0118  2365               	fcall	___lwdiv
  3114  0119  0871               	movf	?___lwdiv+1,w
  3115  011A  00FB               	movwf	___lwmod@dividend+1
  3116  011B  0870               	movf	?___lwdiv,w
  3117  011C  00FA               	movwf	___lwmod@dividend
  3118  011D  2399               	fcall	___lwmod
  3119  011E  0878               	movf	?___lwmod,w
  3120  011F  0020               	movlb	0	; select bank0
  3121  0120  00C4               	movwf	??_vis_next_digit
  3122  0121  0844               	movf	??_vis_next_digit,w
  3123  0122  00C9               	movwf	vis_next_digit@digit_val
  3124                           
  3125                           ;segmentdisplay47.c: 89:     uint8_t sLATB = (0xF0 & LATB);
  3126  0123  0022               	movlb	2	; select bank2
  3127  0124  080D               	movf	13,w	;volatile
  3128  0125  39F0               	andlw	240
  3129  0126  0020               	movlb	0	; select bank0
  3130  0127  00C4               	movwf	??_vis_next_digit
  3131  0128  0844               	movf	??_vis_next_digit,w
  3132  0129  00CA               	movwf	vis_next_digit@sLATB
  3133                           
  3134                           ;segmentdisplay47.c: 91:     LATB = sLATB| (0x08 >> (s_t->digit));
  3135  012A  084E               	movf	vis_next_digit@s_t,w
  3136  012B  0086               	movwf	6
  3137  012C  0187               	clrf	7
  3138  012D  0801               	movf	1,w
  3139  012E  3903               	andlw	3
  3140  012F  00C4               	movwf	??_vis_next_digit
  3141  0130  0AC4               	incf	??_vis_next_digit,f
  3142  0131  3008               	movlw	8
  3143  0132  00C5               	movwf	??_vis_next_digit+1
  3144  0133  3000               	movlw	0
  3145  0134  00C6               	movwf	??_vis_next_digit+2
  3146  0135  2939               	goto	u2224
  3147  0136                     u2225:	
  3148  0136  0D46               	rlf	??_vis_next_digit+2,w
  3149  0137  0CC6               	rrf	??_vis_next_digit+2,f
  3150  0138  0CC5               	rrf	??_vis_next_digit+1,f
  3151  0139                     u2224:	
  3152  0139  0BC4               	decfsz	??_vis_next_digit,f
  3153  013A  2936               	goto	u2225
  3154  013B  0020               	movlb	0	; select bank0
  3155  013C  0845               	movf	??_vis_next_digit+1,w
  3156  013D  044A               	iorwf	vis_next_digit@sLATB,w
  3157  013E  0022               	movlb	2	; select bank2
  3158  013F  008D               	movwf	13	;volatile
  3159                           
  3160                           ;segmentdisplay47.c: 94:     switch (digit_val)
  3161  0140  2959               	goto	l2152
  3162  0141                     l2128:	
  3163                           
  3164                           ;segmentdisplay47.c: 97:             LATA = 0xC0;
  3165  0141  30C0               	movlw	192
  3166  0142  2956               	goto	L10
  3167  0143                     l2130:	
  3168                           ;segmentdisplay47.c: 98:             break;
  3169                           
  3170                           
  3171                           ;segmentdisplay47.c: 100:             LATA = 0xF9;
  3172  0143  30F9               	movlw	249
  3173  0144  2956               	goto	L10
  3174  0145                     l2132:	
  3175                           ;segmentdisplay47.c: 101:             break;
  3176                           
  3177                           
  3178                           ;segmentdisplay47.c: 103:             LATA = 0xA4;
  3179  0145  30A4               	movlw	164
  3180  0146  2956               	goto	L10
  3181  0147                     l2134:	
  3182                           ;segmentdisplay47.c: 104:             break;
  3183                           
  3184                           
  3185                           ;segmentdisplay47.c: 106:             LATA = 0xB0;
  3186  0147  30B0               	movlw	176
  3187  0148  2956               	goto	L10
  3188  0149                     l2136:	
  3189                           ;segmentdisplay47.c: 107:             break;
  3190                           
  3191                           
  3192                           ;segmentdisplay47.c: 109:             LATA = 0x99;
  3193  0149  3099               	movlw	153
  3194  014A  2956               	goto	L10
  3195  014B                     l2138:	
  3196                           ;segmentdisplay47.c: 110:             break;
  3197                           
  3198                           
  3199                           ;segmentdisplay47.c: 112:             LATA = 0x92;
  3200  014B  3092               	movlw	146
  3201  014C  2956               	goto	L10
  3202  014D                     l2140:	
  3203                           ;segmentdisplay47.c: 113:             break;
  3204                           
  3205                           
  3206                           ;segmentdisplay47.c: 115:             LATA = 0x82;
  3207  014D  3082               	movlw	130
  3208  014E  2956               	goto	L10
  3209  014F                     l2142:	
  3210                           ;segmentdisplay47.c: 116:             break;
  3211                           
  3212                           
  3213                           ;segmentdisplay47.c: 118:             LATA = 0xF8;
  3214  014F  30F8               	movlw	248
  3215  0150  2956               	goto	L10
  3216  0151                     l2144:	
  3217                           ;segmentdisplay47.c: 119:             break;
  3218                           
  3219                           
  3220                           ;segmentdisplay47.c: 121:             LATA = 0x80;
  3221  0151  3080               	movlw	128
  3222  0152  2956               	goto	L10
  3223  0153                     l2146:	
  3224                           ;segmentdisplay47.c: 122:             break;
  3225                           
  3226                           
  3227                           ;segmentdisplay47.c: 124:             LATA = 0x90;
  3228  0153  3090               	movlw	144
  3229  0154  2956               	goto	L10
  3230  0155                     l2148:	
  3231                           ;segmentdisplay47.c: 125:             break;
  3232                           
  3233                           
  3234                           ;segmentdisplay47.c: 128:             LATA = 0xEF;
  3235  0155  30EF               	movlw	239
  3236  0156                     L10:	
  3237  0156  0022               	movlb	2	; select bank2
  3238  0157  008C               	movwf	12	;volatile
  3239                           
  3240                           ;segmentdisplay47.c: 129:             break;
  3241  0158  2982               	goto	l2154
  3242  0159                     l2152:	
  3243  0159  0020               	movlb	0	; select bank0
  3244  015A  0849               	movf	vis_next_digit@digit_val,w
  3245  015B  00C4               	movwf	??_vis_next_digit
  3246  015C  01C5               	clrf	??_vis_next_digit+1
  3247                           
  3248                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3249                           ; Switch size 1, requested type "simple"
  3250                           ; Number of cases is 1, Range of values is 0 to 0
  3251                           ; switch strategies available:
  3252                           ; Name         Instructions Cycles
  3253                           ; simple_byte            4     3 (average)
  3254                           ; direct_byte            8     6 (fixed)
  3255                           ; jumptable            260     6 (fixed)
  3256                           ;	Chosen strategy is simple_byte
  3257  015D  0845               	movf	??_vis_next_digit+1,w
  3258  015E  3A00               	xorlw	0	; case 0
  3259  015F  1903               	skipnz
  3260  0160  2962               	goto	l2438
  3261  0161  2955               	goto	l2148
  3262  0162                     l2438:	
  3263                           
  3264                           ; Switch size 1, requested type "simple"
  3265                           ; Number of cases is 10, Range of values is 0 to 9
  3266                           ; switch strategies available:
  3267                           ; Name         Instructions Cycles
  3268                           ; direct_byte           26     6 (fixed)
  3269                           ; simple_byte           31    16 (average)
  3270                           ; jumptable            260     6 (fixed)
  3271                           ;	Chosen strategy is simple_byte
  3272  0162  0844               	movf	??_vis_next_digit,w
  3273  0163  3A00               	xorlw	0	; case 0
  3274  0164  1903               	skipnz
  3275  0165  2941               	goto	l2128
  3276  0166  3A01               	xorlw	1	; case 1
  3277  0167  1903               	skipnz
  3278  0168  2943               	goto	l2130
  3279  0169  3A03               	xorlw	3	; case 2
  3280  016A  1903               	skipnz
  3281  016B  2945               	goto	l2132
  3282  016C  3A01               	xorlw	1	; case 3
  3283  016D  1903               	skipnz
  3284  016E  2947               	goto	l2134
  3285  016F  3A07               	xorlw	7	; case 4
  3286  0170  1903               	skipnz
  3287  0171  2949               	goto	l2136
  3288  0172  3A01               	xorlw	1	; case 5
  3289  0173  1903               	skipnz
  3290  0174  294B               	goto	l2138
  3291  0175  3A03               	xorlw	3	; case 6
  3292  0176  1903               	skipnz
  3293  0177  294D               	goto	l2140
  3294  0178  3A01               	xorlw	1	; case 7
  3295  0179  1903               	skipnz
  3296  017A  294F               	goto	l2142
  3297  017B  3A0F               	xorlw	15	; case 8
  3298  017C  1903               	skipnz
  3299  017D  2951               	goto	l2144
  3300  017E  3A01               	xorlw	1	; case 9
  3301  017F  1903               	skipnz
  3302  0180  2953               	goto	l2146
  3303  0181  2955               	goto	l2148
  3304  0182                     l2154:	
  3305                           
  3306                           ;segmentdisplay47.c: 132:     s_t->digit++;
  3307  0182  0020               	movlb	0	; select bank0
  3308  0183  084E               	movf	vis_next_digit@s_t,w
  3309  0184  0086               	movwf	6
  3310  0185  0187               	clrf	7
  3311  0186  0801               	movf	1,w
  3312  0187  3903               	andlw	3
  3313  0188  00C4               	movwf	??_vis_next_digit
  3314  0189  0AC4               	incf	??_vis_next_digit,f
  3315  018A  0801               	movf	1,w
  3316  018B  0644               	xorwf	??_vis_next_digit,w
  3317  018C  39FC               	andlw	-4
  3318  018D  0644               	xorwf	??_vis_next_digit,w
  3319  018E  0081               	movwf	1
  3320  018F  0008               	return
  3321  0190                     __end_of_vis_next_digit:	
  3322                           
  3323                           	psect	text15
  3324  03F0                     __ptext15:	
  3325 ;; *************** function _seg_disp_47_get_val *****************
  3326 ;; Defined at:
  3327 ;;		line 146 in file "segmentdisplay47.c"
  3328 ;; Parameters:    Size  Location     Type
  3329 ;;  s_t             1    wreg     PTR struct .
  3330 ;;		 -> NULL(0), v_disp(3), 
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;  s_t             1    7[COMMON] PTR struct .
  3333 ;;		 -> NULL(0), v_disp(3), 
  3334 ;;  val             2    5[COMMON] unsigned short 
  3335 ;; Return value:  Size  Location     Type
  3336 ;;                  2    0[COMMON] unsigned short 
  3337 ;; Registers used:
  3338 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMMON   BANK0   BANK1
  3344 ;;      Params:         2       0       0
  3345 ;;      Locals:         3       0       0
  3346 ;;      Temps:          3       0       0
  3347 ;;      Totals:         8       0       0
  3348 ;;Total ram usage:        8 bytes
  3349 ;; Hardware stack levels used:    1
  3350 ;; Hardware stack levels required when called:    2
  3351 ;; This function calls:
  3352 ;;		Nothing
  3353 ;; This function is called by:
  3354 ;;		_vis_next_digit
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           
  3359                           ;psect for function _seg_disp_47_get_val
  3360  03F0                     _seg_disp_47_get_val:	
  3361                           
  3362                           ;incstack = 0
  3363                           ; Regs used in _seg_disp_47_get_val: [wreg+fsr1l+fsr1h+status,2+status,0]
  3364                           ;seg_disp_47_get_val@s_t stored from wreg
  3365  03F0  00F7               	movwf	seg_disp_47_get_val@s_t
  3366                           
  3367                           ;segmentdisplay47.c: 147:     uint16_t val = 0;
  3368  03F1  01F5               	clrf	seg_disp_47_get_val@val
  3369  03F2  01F6               	clrf	seg_disp_47_get_val@val+1
  3370                           
  3371                           ;segmentdisplay47.c: 148:     val |= s_t->value_lo;
  3372  03F3  0A77               	incf	seg_disp_47_get_val@s_t,w
  3373  03F4  0086               	movwf	6
  3374  03F5  0187               	clrf	7
  3375  03F6  0801               	movf	1,w
  3376  03F7  00F2               	movwf	??_seg_disp_47_get_val
  3377  03F8  01F3               	clrf	??_seg_disp_47_get_val+1
  3378  03F9  0872               	movf	??_seg_disp_47_get_val,w
  3379  03FA  04F5               	iorwf	seg_disp_47_get_val@val,f
  3380  03FB  0873               	movf	??_seg_disp_47_get_val+1,w
  3381  03FC  04F6               	iorwf	seg_disp_47_get_val@val+1,f
  3382                           
  3383                           ;segmentdisplay47.c: 149:     val |= s_t->value_hi << 8;
  3384  03FD  0877               	movf	seg_disp_47_get_val@s_t,w
  3385  03FE  3E02               	addlw	2
  3386  03FF  0086               	movwf	6
  3387  0400  0187               	clrf	7
  3388  0401  0801               	movf	1,w
  3389  0402  393F               	andlw	63
  3390  0403  00F2               	movwf	??_seg_disp_47_get_val
  3391  0404  01F3               	clrf	??_seg_disp_47_get_val+1
  3392  0405  0872               	movf	??_seg_disp_47_get_val,w
  3393  0406  00F3               	movwf	??_seg_disp_47_get_val+1
  3394  0407  01F2               	clrf	??_seg_disp_47_get_val
  3395  0408  0872               	movf	??_seg_disp_47_get_val,w
  3396  0409  04F5               	iorwf	seg_disp_47_get_val@val,f
  3397  040A  0873               	movf	??_seg_disp_47_get_val+1,w
  3398  040B  04F6               	iorwf	seg_disp_47_get_val@val+1,f
  3399                           
  3400                           ;segmentdisplay47.c: 150:     return val;
  3401  040C  0876               	movf	seg_disp_47_get_val@val+1,w
  3402  040D  00F1               	movwf	?_seg_disp_47_get_val+1
  3403  040E  0875               	movf	seg_disp_47_get_val@val,w
  3404  040F  00F0               	movwf	?_seg_disp_47_get_val
  3405  0410  0008               	return
  3406  0411                     __end_of_seg_disp_47_get_val:	
  3407                           
  3408                           	psect	text16
  3409  0485                     __ptext16:	
  3410 ;; *************** function ___wmul *****************
  3411 ;; Defined at:
  3412 ;;		line 15 in file "D:\Programs\Compilers\8 bit\pic\sources\c99\common\Umul16.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;  multiplier      2    0[COMMON] unsigned int 
  3415 ;;  multiplicand    2    2[COMMON] unsigned int 
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;  product         2    4[COMMON] unsigned int 
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  2    0[COMMON] unsigned int 
  3420 ;; Registers used:
  3421 ;;		wreg, status,2, status,0
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMMON   BANK0   BANK1
  3427 ;;      Params:         4       0       0
  3428 ;;      Locals:         2       0       0
  3429 ;;      Temps:          0       0       0
  3430 ;;      Totals:         6       0       0
  3431 ;;Total ram usage:        6 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    2
  3434 ;; This function calls:
  3435 ;;		Nothing
  3436 ;; This function is called by:
  3437 ;;		_vis_next_digit
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           
  3442                           ;psect for function ___wmul
  3443  0485                     ___wmul:	
  3444                           
  3445                           ;incstack = 0
  3446                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3447  0485  01F4               	clrf	___wmul@product
  3448  0486  01F5               	clrf	___wmul@product+1
  3449  0487                     l1994:	
  3450  0487  1C70               	btfss	___wmul@multiplier,0
  3451  0488  2C8D               	goto	l666
  3452  0489  0872               	movf	___wmul@multiplicand,w
  3453  048A  07F4               	addwf	___wmul@product,f
  3454  048B  0873               	movf	___wmul@multiplicand+1,w
  3455  048C  3DF5               	addwfc	___wmul@product+1,f
  3456  048D                     l666:	
  3457  048D  3001               	movlw	1
  3458  048E                     u1955:	
  3459  048E  35F2               	lslf	___wmul@multiplicand,f
  3460  048F  0DF3               	rlf	___wmul@multiplicand+1,f
  3461  0490  0B89               	decfsz	9,f
  3462  0491  2C8E               	goto	u1955
  3463  0492  3001               	movlw	1
  3464  0493                     u1965:	
  3465  0493  36F1               	lsrf	___wmul@multiplier+1,f
  3466  0494  0CF0               	rrf	___wmul@multiplier,f
  3467  0495  0B89               	decfsz	9,f
  3468  0496  2C93               	goto	u1965
  3469  0497  0870               	movf	___wmul@multiplier,w
  3470  0498  0471               	iorwf	___wmul@multiplier+1,w
  3471  0499  1D03               	btfss	3,2
  3472  049A  2C87               	goto	l1994
  3473  049B  0875               	movf	___wmul@product+1,w
  3474  049C  00F1               	movwf	?___wmul+1
  3475  049D  0874               	movf	___wmul@product,w
  3476  049E  00F0               	movwf	?___wmul
  3477  049F  0008               	return
  3478  04A0                     __end_of___wmul:	
  3479                           
  3480                           	psect	text17
  3481  0399                     __ptext17:	
  3482 ;; *************** function ___lwmod *****************
  3483 ;; Defined at:
  3484 ;;		line 5 in file "D:\Programs\Compilers\8 bit\pic\sources\c99\common\lwmod.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;  divisor         2    8[COMMON] unsigned int 
  3487 ;;  dividend        2   10[COMMON] unsigned int 
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;  counter         1   13[COMMON] unsigned char 
  3490 ;; Return value:  Size  Location     Type
  3491 ;;                  2    8[COMMON] unsigned int 
  3492 ;; Registers used:
  3493 ;;		wreg, status,2, status,0
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMMON   BANK0   BANK1
  3499 ;;      Params:         4       0       0
  3500 ;;      Locals:         1       0       0
  3501 ;;      Temps:          1       0       0
  3502 ;;      Totals:         6       0       0
  3503 ;;Total ram usage:        6 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    2
  3506 ;; This function calls:
  3507 ;;		Nothing
  3508 ;; This function is called by:
  3509 ;;		_vis_next_digit
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           
  3514                           ;psect for function ___lwmod
  3515  0399                     ___lwmod:	
  3516                           
  3517                           ;incstack = 0
  3518                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3519  0399  0878               	movf	___lwmod@divisor,w
  3520  039A  0479               	iorwf	___lwmod@divisor+1,w
  3521  039B  1903               	btfsc	3,2
  3522  039C  2BC0               	goto	l2050
  3523  039D  01FD               	clrf	___lwmod@counter
  3524  039E  0AFD               	incf	___lwmod@counter,f
  3525  039F                     l2040:	
  3526  039F  1BF9               	btfsc	___lwmod@divisor+1,7
  3527  03A0  2BAB               	goto	l2042
  3528  03A1  3001               	movlw	1
  3529  03A2                     u2065:	
  3530  03A2  35F8               	lslf	___lwmod@divisor,f
  3531  03A3  0DF9               	rlf	___lwmod@divisor+1,f
  3532  03A4  0B89               	decfsz	9,f
  3533  03A5  2BA2               	goto	u2065
  3534  03A6  3001               	movlw	1
  3535  03A7  00FC               	movwf	??___lwmod
  3536  03A8  087C               	movf	??___lwmod,w
  3537  03A9  07FD               	addwf	___lwmod@counter,f
  3538  03AA  2B9F               	goto	l2040
  3539  03AB                     l2042:	
  3540  03AB  0879               	movf	___lwmod@divisor+1,w
  3541  03AC  027B               	subwf	___lwmod@dividend+1,w
  3542  03AD  1D03               	skipz
  3543  03AE  2BB1               	goto	u2085
  3544  03AF  0878               	movf	___lwmod@divisor,w
  3545  03B0  027A               	subwf	___lwmod@dividend,w
  3546  03B1                     u2085:	
  3547  03B1  1C03               	skipc
  3548  03B2  2BB7               	goto	l2046
  3549  03B3  0878               	movf	___lwmod@divisor,w
  3550  03B4  02FA               	subwf	___lwmod@dividend,f
  3551  03B5  0879               	movf	___lwmod@divisor+1,w
  3552  03B6  3BFB               	subwfb	___lwmod@dividend+1,f
  3553  03B7                     l2046:	
  3554  03B7  3001               	movlw	1
  3555  03B8                     u2095:	
  3556  03B8  36F9               	lsrf	___lwmod@divisor+1,f
  3557  03B9  0CF8               	rrf	___lwmod@divisor,f
  3558  03BA  0B89               	decfsz	9,f
  3559  03BB  2BB8               	goto	u2095
  3560  03BC  3001               	movlw	1
  3561  03BD  02FD               	subwf	___lwmod@counter,f
  3562  03BE  1D03               	btfss	3,2
  3563  03BF  2BAB               	goto	l2042
  3564  03C0                     l2050:	
  3565  03C0  087B               	movf	___lwmod@dividend+1,w
  3566  03C1  00F9               	movwf	?___lwmod+1
  3567  03C2  087A               	movf	___lwmod@dividend,w
  3568  03C3  00F8               	movwf	?___lwmod
  3569  03C4  0008               	return
  3570  03C5                     __end_of___lwmod:	
  3571                           
  3572                           	psect	text18
  3573  0365                     __ptext18:	
  3574 ;; *************** function ___lwdiv *****************
  3575 ;; Defined at:
  3576 ;;		line 5 in file "D:\Programs\Compilers\8 bit\pic\sources\c99\common\lwdiv.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;  divisor         2    0[COMMON] unsigned int 
  3579 ;;  dividend        2    2[COMMON] unsigned int 
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;  quotient        2    5[COMMON] unsigned int 
  3582 ;;  counter         1    7[COMMON] unsigned char 
  3583 ;; Return value:  Size  Location     Type
  3584 ;;                  2    0[COMMON] unsigned int 
  3585 ;; Registers used:
  3586 ;;		wreg, status,2, status,0
  3587 ;; Tracked objects:
  3588 ;;		On entry : 0/0
  3589 ;;		On exit  : 0/0
  3590 ;;		Unchanged: 0/0
  3591 ;; Data sizes:     COMMON   BANK0   BANK1
  3592 ;;      Params:         4       0       0
  3593 ;;      Locals:         3       0       0
  3594 ;;      Temps:          1       0       0
  3595 ;;      Totals:         8       0       0
  3596 ;;Total ram usage:        8 bytes
  3597 ;; Hardware stack levels used:    1
  3598 ;; Hardware stack levels required when called:    2
  3599 ;; This function calls:
  3600 ;;		Nothing
  3601 ;; This function is called by:
  3602 ;;		_vis_next_digit
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606                           
  3607                           ;psect for function ___lwdiv
  3608  0365                     ___lwdiv:	
  3609                           
  3610                           ;incstack = 0
  3611                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3612  0365  01F5               	clrf	___lwdiv@quotient
  3613  0366  01F6               	clrf	___lwdiv@quotient+1
  3614  0367  0870               	movf	___lwdiv@divisor,w
  3615  0368  0471               	iorwf	___lwdiv@divisor+1,w
  3616  0369  1903               	btfsc	3,2
  3617  036A  2B94               	goto	l2028
  3618  036B  01F7               	clrf	___lwdiv@counter
  3619  036C  0AF7               	incf	___lwdiv@counter,f
  3620  036D                     l2016:	
  3621  036D  1BF1               	btfsc	___lwdiv@divisor+1,7
  3622  036E  2B79               	goto	l2018
  3623  036F  3001               	movlw	1
  3624  0370                     u1995:	
  3625  0370  35F0               	lslf	___lwdiv@divisor,f
  3626  0371  0DF1               	rlf	___lwdiv@divisor+1,f
  3627  0372  0B89               	decfsz	9,f
  3628  0373  2B70               	goto	u1995
  3629  0374  3001               	movlw	1
  3630  0375  00F4               	movwf	??___lwdiv
  3631  0376  0874               	movf	??___lwdiv,w
  3632  0377  07F7               	addwf	___lwdiv@counter,f
  3633  0378  2B6D               	goto	l2016
  3634  0379                     l2018:	
  3635  0379  3001               	movlw	1
  3636  037A                     u2015:	
  3637  037A  35F5               	lslf	___lwdiv@quotient,f
  3638  037B  0DF6               	rlf	___lwdiv@quotient+1,f
  3639  037C  0B89               	decfsz	9,f
  3640  037D  2B7A               	goto	u2015
  3641  037E  0871               	movf	___lwdiv@divisor+1,w
  3642  037F  0273               	subwf	___lwdiv@dividend+1,w
  3643  0380  1D03               	skipz
  3644  0381  2B84               	goto	u2025
  3645  0382  0870               	movf	___lwdiv@divisor,w
  3646  0383  0272               	subwf	___lwdiv@dividend,w
  3647  0384                     u2025:	
  3648  0384  1C03               	skipc
  3649  0385  2B8B               	goto	l2024
  3650  0386  0870               	movf	___lwdiv@divisor,w
  3651  0387  02F2               	subwf	___lwdiv@dividend,f
  3652  0388  0871               	movf	___lwdiv@divisor+1,w
  3653  0389  3BF3               	subwfb	___lwdiv@dividend+1,f
  3654  038A  1475               	bsf	___lwdiv@quotient,0
  3655  038B                     l2024:	
  3656  038B  3001               	movlw	1
  3657  038C                     u2035:	
  3658  038C  36F1               	lsrf	___lwdiv@divisor+1,f
  3659  038D  0CF0               	rrf	___lwdiv@divisor,f
  3660  038E  0B89               	decfsz	9,f
  3661  038F  2B8C               	goto	u2035
  3662  0390  3001               	movlw	1
  3663  0391  02F7               	subwf	___lwdiv@counter,f
  3664  0392  1D03               	btfss	3,2
  3665  0393  2B79               	goto	l2018
  3666  0394                     l2028:	
  3667  0394  0876               	movf	___lwdiv@quotient+1,w
  3668  0395  00F1               	movwf	?___lwdiv+1
  3669  0396  0875               	movf	___lwdiv@quotient,w
  3670  0397  00F0               	movwf	?___lwdiv
  3671  0398  0008               	return
  3672  0399                     __end_of___lwdiv:	
  3673                           
  3674                           	psect	text19
  3675  053D                     __ptext19:	
  3676 ;; *************** function _seg_disp_47_on *****************
  3677 ;; Defined at:
  3678 ;;		line 159 in file "segmentdisplay47.c"
  3679 ;; Parameters:    Size  Location     Type
  3680 ;;  s_t             1    wreg     PTR struct .
  3681 ;;		 -> NULL(0), v_disp(3), 
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;  s_t             1    0[COMMON] PTR struct .
  3684 ;;		 -> NULL(0), v_disp(3), 
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  1    wreg      void 
  3687 ;; Registers used:
  3688 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMMON   BANK0   BANK1
  3694 ;;      Params:         0       0       0
  3695 ;;      Locals:         1       0       0
  3696 ;;      Temps:          0       0       0
  3697 ;;      Totals:         1       0       0
  3698 ;;Total ram usage:        1 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    2
  3701 ;; This function calls:
  3702 ;;		Nothing
  3703 ;; This function is called by:
  3704 ;;		_update_int_flags
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           
  3709                           ;psect for function _seg_disp_47_on
  3710  053D                     _seg_disp_47_on:	
  3711                           
  3712                           ;incstack = 0
  3713                           ; Regs used in _seg_disp_47_on: [wreg+fsr1l+fsr1h+status,2+status,0]
  3714                           ;seg_disp_47_on@s_t stored from wreg
  3715  053D  00F0               	movwf	seg_disp_47_on@s_t
  3716  053E  0870               	movf	seg_disp_47_on@s_t,w
  3717  053F  3E02               	addlw	2
  3718  0540  0086               	movwf	6
  3719  0541  0187               	clrf	7
  3720  0542  1701               	bsf	1,6
  3721  0543  0008               	return
  3722  0544                     __end_of_seg_disp_47_on:	
  3723                           
  3724                           	psect	text20
  3725  0522                     __ptext20:	
  3726 ;; *************** function _seg_disp_47_off *****************
  3727 ;; Defined at:
  3728 ;;		line 160 in file "segmentdisplay47.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;  s_t             1    wreg     PTR struct .
  3731 ;;		 -> NULL(0), v_disp(3), 
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;  s_t             1    0[COMMON] PTR struct .
  3734 ;;		 -> NULL(0), v_disp(3), 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      void 
  3737 ;; Registers used:
  3738 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMMON   BANK0   BANK1
  3744 ;;      Params:         0       0       0
  3745 ;;      Locals:         1       0       0
  3746 ;;      Temps:          0       0       0
  3747 ;;      Totals:         1       0       0
  3748 ;;Total ram usage:        1 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    2
  3751 ;; This function calls:
  3752 ;;		Nothing
  3753 ;; This function is called by:
  3754 ;;		_update_int_flags
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           
  3759                           ;psect for function _seg_disp_47_off
  3760  0522                     _seg_disp_47_off:	
  3761                           
  3762                           ;incstack = 0
  3763                           ; Regs used in _seg_disp_47_off: [wreg+fsr1l+fsr1h+status,2+status,0]
  3764                           ;seg_disp_47_off@s_t stored from wreg
  3765  0522  00F0               	movwf	seg_disp_47_off@s_t
  3766  0523  0870               	movf	seg_disp_47_off@s_t,w
  3767  0524  3E02               	addlw	2
  3768  0525  0086               	movwf	6
  3769  0526  0187               	clrf	7
  3770  0527  1301               	bcf	1,6
  3771  0528  30FF               	movlw	255
  3772  0529  0022               	movlb	2	; select bank2
  3773  052A  008C               	movwf	12	;volatile
  3774  052B  0008               	return
  3775  052C                     __end_of_seg_disp_47_off:	
  3776                           
  3777                           	psect	text21
  3778  0469                     __ptext21:	
  3779 ;; *************** function _cat_auto_save *****************
  3780 ;; Defined at:
  3781 ;;		line 176 in file "counter_1512.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;		None
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;		None
  3786 ;; Return value:  Size  Location     Type
  3787 ;;                  1    wreg      void 
  3788 ;; Registers used:
  3789 ;;		wreg, status,2, status,0, pclath, cstack
  3790 ;; Tracked objects:
  3791 ;;		On entry : 0/0
  3792 ;;		On exit  : 0/0
  3793 ;;		Unchanged: 0/0
  3794 ;; Data sizes:     COMMON   BANK0   BANK1
  3795 ;;      Params:         0       0       0
  3796 ;;      Locals:         0       0       0
  3797 ;;      Temps:          1       0       0
  3798 ;;      Totals:         1       0       0
  3799 ;;Total ram usage:        1 bytes
  3800 ;; Hardware stack levels used:    1
  3801 ;; Hardware stack levels required when called:    4
  3802 ;; This function calls:
  3803 ;;		_set_cat_val
  3804 ;; This function is called by:
  3805 ;;		_update_int_flags
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           
  3810                           ;psect for function _cat_auto_save
  3811  0469                     _cat_auto_save:	
  3812                           
  3813                           ;counter_1512.c: 177:     if (last_save_cat == cur_cat && last_save_val == cur_val) retu
      +                          rn;
  3814                           
  3815                           ;incstack = 0
  3816                           ; Regs used in _cat_auto_save: [wreg+status,2+status,0+pclath+cstack]
  3817  0469  0020               	movlb	0	; select bank0
  3818  046A  0834               	movf	_last_save_cat,w
  3819  046B  0636               	xorwf	_cur_cat,w
  3820  046C  1D03               	skipz
  3821  046D  2C76               	goto	l2166
  3822  046E  0833               	movf	_cur_val+1,w
  3823  046F  062F               	xorwf	_last_save_val+1,w
  3824  0470  1D03               	skipz
  3825  0471  2C74               	goto	u2245
  3826  0472  0832               	movf	_cur_val,w
  3827  0473  062E               	xorwf	_last_save_val,w
  3828  0474                     u2245:	
  3829  0474  1903               	btfsc	3,2
  3830  0475  0008               	return
  3831  0476                     l2166:	
  3832                           
  3833                           ;counter_1512.c: 178:     last_save_cat = cur_cat; last_save_val = cur_val;
  3834  0476  0836               	movf	_cur_cat,w
  3835  0477  00FB               	movwf	??_cat_auto_save
  3836  0478  087B               	movf	??_cat_auto_save,w
  3837  0479  00B4               	movwf	_last_save_cat
  3838  047A  0833               	movf	_cur_val+1,w
  3839  047B  00AF               	movwf	_last_save_val+1
  3840  047C  0832               	movf	_cur_val,w
  3841  047D  00AE               	movwf	_last_save_val
  3842                           
  3843                           ;counter_1512.c: 179:     set_cat_val (cur_cat, cur_val);
  3844  047E  0833               	movf	_cur_val+1,w
  3845  047F  00F8               	movwf	set_cat_val@val+1
  3846  0480  0832               	movf	_cur_val,w
  3847  0481  00F7               	movwf	set_cat_val@val
  3848  0482  0836               	movf	_cur_cat,w
  3849  0483  2329               	fcall	_set_cat_val
  3850  0484  0008               	return
  3851  0485                     __end_of_cat_auto_save:	
  3852                           
  3853                           	psect	text22
  3854  04F9                     __ptext22:	
  3855 ;; *************** function _rst_storage *****************
  3856 ;; Defined at:
  3857 ;;		line 196 in file "counter_1512.c"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;		None
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;  i               1   12[COMMON] unsigned char 
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      void 
  3864 ;; Registers used:
  3865 ;;		wreg, status,2, status,0, pclath, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMMON   BANK0   BANK1
  3871 ;;      Params:         0       0       0
  3872 ;;      Locals:         1       0       0
  3873 ;;      Temps:          1       0       0
  3874 ;;      Totals:         2       0       0
  3875 ;;Total ram usage:        2 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:    4
  3878 ;; This function calls:
  3879 ;;		_set_cat_val
  3880 ;; This function is called by:
  3881 ;;		_main
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           
  3886                           ;psect for function _rst_storage
  3887  04F9                     _rst_storage:	
  3888                           
  3889                           ;counter_1512.c: 197:     for (uint8_t i = 0; i < 2; i++){
  3890                           
  3891                           ;incstack = 0
  3892                           ; Regs used in _rst_storage: [wreg+status,2+status,0+pclath+cstack]
  3893  04F9  01FC               	clrf	rst_storage@i
  3894  04FA                     l2230:	
  3895                           
  3896                           ;counter_1512.c: 198:         set_cat_val(i, 0x12);
  3897  04FA  3012               	movlw	18
  3898  04FB  00F7               	movwf	set_cat_val@val
  3899  04FC  3000               	movlw	0
  3900  04FD  00F8               	movwf	set_cat_val@val+1
  3901  04FE  087C               	movf	rst_storage@i,w
  3902  04FF  2329               	fcall	_set_cat_val
  3903                           
  3904                           ;counter_1512.c: 199:     }
  3905  0500  3001               	movlw	1
  3906  0501  00FB               	movwf	??_rst_storage
  3907  0502  087B               	movf	??_rst_storage,w
  3908  0503  07FC               	addwf	rst_storage@i,f
  3909  0504  3002               	movlw	2
  3910  0505  027C               	subwf	rst_storage@i,w
  3911  0506  1803               	btfsc	3,0
  3912  0507  0008               	return
  3913  0508  2CFA               	goto	l2230
  3914  0509                     __end_of_rst_storage:	
  3915                           
  3916                           	psect	text23
  3917  0329                     __ptext23:	
  3918 ;; *************** function _set_cat_val *****************
  3919 ;; Defined at:
  3920 ;;		line 162 in file "counter_1512.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;  category        1    wreg     unsigned char 
  3923 ;;  val             2    7[COMMON] unsigned short 
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;  category        1    2[BANK0 ] unsigned char 
  3926 ;;  i               1    3[BANK0 ] unsigned char 
  3927 ;;  add_start       2    0[BANK0 ] unsigned short 
  3928 ;; Return value:  Size  Location     Type
  3929 ;;                  1    wreg      void 
  3930 ;; Registers used:
  3931 ;;		wreg, status,2, status,0, pclath, cstack
  3932 ;; Tracked objects:
  3933 ;;		On entry : 0/0
  3934 ;;		On exit  : 0/0
  3935 ;;		Unchanged: 0/0
  3936 ;; Data sizes:     COMMON   BANK0   BANK1
  3937 ;;      Params:         2       0       0
  3938 ;;      Locals:         0       4       0
  3939 ;;      Temps:          2       0       0
  3940 ;;      Totals:         4       4       0
  3941 ;;Total ram usage:        8 bytes
  3942 ;; Hardware stack levels used:    1
  3943 ;; Hardware stack levels required when called:    3
  3944 ;; This function calls:
  3945 ;;		_eeprom_write_16
  3946 ;; This function is called by:
  3947 ;;		_update_switches
  3948 ;;		_cat_auto_save
  3949 ;;		_change_category
  3950 ;;		_rst_storage
  3951 ;;		_init_storage
  3952 ;; This function uses a non-reentrant model
  3953 ;;
  3954                           
  3955                           
  3956                           ;psect for function _set_cat_val
  3957  0329                     _set_cat_val:	
  3958                           
  3959                           ;incstack = 0
  3960                           ; Regs used in _set_cat_val: [wreg+status,2+status,0+pclath+cstack]
  3961                           ;set_cat_val@category stored from wreg
  3962  0329  0020               	movlb	0	; select bank0
  3963  032A  00C6               	movwf	set_cat_val@category
  3964                           
  3965                           ;counter_1512.c: 163:     if (cur_cat > 2 - 1) return;
  3966  032B  3002               	movlw	2
  3967  032C  0236               	subwf	_cur_cat,w
  3968  032D  1803               	btfsc	3,0
  3969  032E  0008               	return
  3970                           
  3971                           ;counter_1512.c: 166:     uint16_t add_start = 0x0450 + (2 * category);
  3972  032F  0846               	movf	set_cat_val@category,w
  3973  0330  00F9               	movwf	??_set_cat_val
  3974  0331  01FA               	clrf	??_set_cat_val+1
  3975  0332  35F9               	lslf	??_set_cat_val,f
  3976  0333  0DFA               	rlf	??_set_cat_val+1,f
  3977  0334  0879               	movf	??_set_cat_val,w
  3978  0335  3E50               	addlw	80
  3979  0336  00C4               	movwf	set_cat_val@add_start
  3980  0337  3004               	movlw	4
  3981  0338  3D7A               	addwfc	??_set_cat_val+1,w
  3982  0339  00C5               	movwf	set_cat_val@add_start+1
  3983                           
  3984                           ;counter_1512.c: 167:     for (uint8_t i = 0; i < 2; i ++){
  3985  033A  01C7               	clrf	set_cat_val@i
  3986  033B                     l1956:	
  3987                           
  3988                           ;counter_1512.c: 168:         _delay((unsigned long)((5)*(8000000/4000.0)));
  3989  033B  300D               	movlw	13
  3990  033C  00F9               	movwf	??_set_cat_val
  3991  033D  30FC               	movlw	252
  3992  033E                     u2697:	
  3993  033E  0B89               	decfsz	9,f
  3994  033F  2B3E               	goto	u2697
  3995  0340  0BF9               	decfsz	??_set_cat_val,f
  3996  0341  2B3E               	goto	u2697
  3997                           
  3998                           ;counter_1512.c: 169:         eeprom_write_16 (0xA0, add_start + i, val);
  3999  0342  0020               	movlb	0	; select bank0
  4000  0343  0847               	movf	set_cat_val@i,w
  4001  0344  0744               	addwf	set_cat_val@add_start,w
  4002  0345  00F0               	movwf	eeprom_write_16@add
  4003  0346  0845               	movf	set_cat_val@add_start+1,w
  4004  0347  1803               	skipnc
  4005  0348  0A45               	incf	set_cat_val@add_start+1,w
  4006  0349  00F1               	movwf	eeprom_write_16@add+1
  4007  034A  0877               	movf	set_cat_val@val,w
  4008  034B  00F9               	movwf	??_set_cat_val
  4009  034C  0879               	movf	??_set_cat_val,w
  4010  034D  00F2               	movwf	eeprom_write_16@eeData
  4011  034E  30A0               	movlw	160
  4012  034F  22E7               	fcall	_eeprom_write_16
  4013                           
  4014                           ;counter_1512.c: 170:         val = val >> 8;
  4015  0350  0878               	movf	set_cat_val@val+1,w
  4016  0351  00FA               	movwf	??_set_cat_val+1
  4017  0352  0877               	movf	set_cat_val@val,w
  4018  0353  00F9               	movwf	??_set_cat_val
  4019  0354  087A               	movf	??_set_cat_val+1,w
  4020  0355  00F9               	movwf	??_set_cat_val
  4021  0356  01FA               	clrf	??_set_cat_val+1
  4022  0357  0879               	movf	??_set_cat_val,w
  4023  0358  00F7               	movwf	set_cat_val@val
  4024  0359  087A               	movf	??_set_cat_val+1,w
  4025  035A  00F8               	movwf	set_cat_val@val+1
  4026                           
  4027                           ;counter_1512.c: 171:     }
  4028  035B  3001               	movlw	1
  4029  035C  00F9               	movwf	??_set_cat_val
  4030  035D  0879               	movf	??_set_cat_val,w
  4031  035E  0020               	movlb	0	; select bank0
  4032  035F  07C7               	addwf	set_cat_val@i,f
  4033  0360  3002               	movlw	2
  4034  0361  0247               	subwf	set_cat_val@i,w
  4035  0362  1803               	btfsc	3,0
  4036  0363  0008               	return
  4037  0364  2B3B               	goto	l1956
  4038  0365                     __end_of_set_cat_val:	
  4039                           
  4040                           	psect	text24
  4041  02E7                     __ptext24:	
  4042 ;; *************** function _eeprom_write_16 *****************
  4043 ;; Defined at:
  4044 ;;		line 115 in file "i2c_eeprom.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;  slaveAdd        1    wreg     unsigned char 
  4047 ;;  add             2    0[COMMON] unsigned short 
  4048 ;;  eeData          1    2[COMMON] unsigned char 
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;  slaveAdd        1    4[COMMON] unsigned char 
  4051 ;;  addLow          1    6[COMMON] unsigned char 
  4052 ;;  addHigh         1    5[COMMON] unsigned char 
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  1    wreg      void 
  4055 ;; Registers used:
  4056 ;;		wreg, status,2
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMMON   BANK0   BANK1
  4062 ;;      Params:         3       0       0
  4063 ;;      Locals:         3       0       0
  4064 ;;      Temps:          1       0       0
  4065 ;;      Totals:         7       0       0
  4066 ;;Total ram usage:        7 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    2
  4069 ;; This function calls:
  4070 ;;		Nothing
  4071 ;; This function is called by:
  4072 ;;		_main
  4073 ;;		_set_cat_val
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           
  4078                           ;psect for function _eeprom_write_16
  4079  02E7                     _eeprom_write_16:	
  4080                           
  4081                           ;incstack = 0
  4082                           ; Regs used in _eeprom_write_16: [wreg+status,2]
  4083                           ;eeprom_write_16@slaveAdd stored from wreg
  4084  02E7  00F4               	movwf	eeprom_write_16@slaveAdd
  4085                           
  4086                           ;i2c_eeprom.c: 116:     uint8_t addHigh = add >> 8;
  4087  02E8  0871               	movf	eeprom_write_16@add+1,w
  4088  02E9  00F3               	movwf	??_eeprom_write_16
  4089  02EA  0873               	movf	??_eeprom_write_16,w
  4090  02EB  00F5               	movwf	eeprom_write_16@addHigh
  4091                           
  4092                           ;i2c_eeprom.c: 117:     uint8_t addLow = add;
  4093  02EC  0870               	movf	eeprom_write_16@add,w
  4094  02ED  00F3               	movwf	??_eeprom_write_16
  4095  02EE  0873               	movf	??_eeprom_write_16,w
  4096  02EF  00F6               	movwf	eeprom_write_16@addLow
  4097                           
  4098                           ;i2c_eeprom.c: 118:     SSPCON2bits.SEN = 1;
  4099  02F0  0024               	movlb	4	; select bank4
  4100  02F1  1416               	bsf	22,0	;volatile
  4101  02F2                     l349:	
  4102                           ;i2c_eeprom.c: 119:     while (SEN);
  4103                           
  4104  02F2  1816               	btfsc	22,0	;volatile
  4105  02F3  2AF2               	goto	l349
  4106                           
  4107                           ;i2c_eeprom.c: 120:     PIR1bits.SSPIF = 0;
  4108  02F4  0020               	movlb	0	; select bank0
  4109  02F5  1191               	bcf	17,3	;volatile
  4110                           
  4111                           ;i2c_eeprom.c: 122:     SSPBUF = slaveAdd;
  4112  02F6  0874               	movf	eeprom_write_16@slaveAdd,w
  4113  02F7  0024               	movlb	4	; select bank4
  4114  02F8  0091               	movwf	17	;volatile
  4115  02F9                     l352:	
  4116                           ;i2c_eeprom.c: 123:     while (!SSPIF);
  4117                           
  4118  02F9  0020               	movlb	0	; select bank0
  4119  02FA  1D91               	btfss	17,3	;volatile
  4120  02FB  2AF9               	goto	l352
  4121                           
  4122                           ;i2c_eeprom.c: 124:     PIR1bits.SSPIF = 0;
  4123  02FC  1191               	bcf	17,3	;volatile
  4124                           
  4125                           ;i2c_eeprom.c: 125:     if (SSPCON2bits.ACKSTAT) {
  4126  02FD  0024               	movlb	4	; select bank4
  4127  02FE  1F16               	btfss	22,6	;volatile
  4128  02FF  2B04               	goto	l1904
  4129                           
  4130                           ;i2c_eeprom.c: 126:         SSPCON2bits.PEN = 1;
  4131  0300  1516               	bsf	22,2	;volatile
  4132  0301                     l356:	
  4133                           ;i2c_eeprom.c: 127:         while (PEN);
  4134                           
  4135  0301  1D16               	btfss	22,2	;volatile
  4136  0302  0008               	return
  4137  0303  2B01               	goto	l356
  4138  0304                     l1904:	
  4139                           
  4140                           ;i2c_eeprom.c: 131:     SSPBUF = addHigh;
  4141  0304  0875               	movf	eeprom_write_16@addHigh,w
  4142  0305  0091               	movwf	17	;volatile
  4143  0306                     l360:	
  4144                           ;i2c_eeprom.c: 132:     while (!SSPIF);
  4145                           
  4146  0306  0020               	movlb	0	; select bank0
  4147  0307  1D91               	btfss	17,3	;volatile
  4148  0308  2B06               	goto	l360
  4149                           
  4150                           ;i2c_eeprom.c: 133:     PIR1bits.SSPIF = 0;
  4151  0309  1191               	bcf	17,3	;volatile
  4152                           
  4153                           ;i2c_eeprom.c: 134:     if (SSPCON2bits.ACKSTAT) {
  4154  030A  0024               	movlb	4	; select bank4
  4155  030B  1F16               	btfss	22,6	;volatile
  4156  030C  2B11               	goto	l1908
  4157                           
  4158                           ;i2c_eeprom.c: 135:         SSPCON2bits.PEN = 1;
  4159  030D  1516               	bsf	22,2	;volatile
  4160  030E                     l364:	
  4161                           ;i2c_eeprom.c: 136:         while (PEN);
  4162                           
  4163  030E  1D16               	btfss	22,2	;volatile
  4164  030F  0008               	return
  4165  0310  2B0E               	goto	l364
  4166  0311                     l1908:	
  4167                           
  4168                           ;i2c_eeprom.c: 140:     SSPBUF = addLow;
  4169  0311  0876               	movf	eeprom_write_16@addLow,w
  4170  0312  0091               	movwf	17	;volatile
  4171  0313                     l367:	
  4172                           ;i2c_eeprom.c: 141:     while (!SSPIF);
  4173                           
  4174  0313  0020               	movlb	0	; select bank0
  4175  0314  1D91               	btfss	17,3	;volatile
  4176  0315  2B13               	goto	l367
  4177                           
  4178                           ;i2c_eeprom.c: 142:     PIR1bits.SSPIF = 0;
  4179  0316  1191               	bcf	17,3	;volatile
  4180                           
  4181                           ;i2c_eeprom.c: 143:     if (SSPCON2bits.ACKSTAT) {
  4182  0317  0024               	movlb	4	; select bank4
  4183  0318  1F16               	btfss	22,6	;volatile
  4184  0319  2B1E               	goto	l1912
  4185                           
  4186                           ;i2c_eeprom.c: 144:         SSPCON2bits.PEN = 1;
  4187  031A  1516               	bsf	22,2	;volatile
  4188  031B                     l371:	
  4189                           ;i2c_eeprom.c: 145:         while (PEN);
  4190                           
  4191  031B  1D16               	btfss	22,2	;volatile
  4192  031C  0008               	return
  4193  031D  2B1B               	goto	l371
  4194  031E                     l1912:	
  4195                           
  4196                           ;i2c_eeprom.c: 149:     SSPBUF = eeData;
  4197  031E  0872               	movf	eeprom_write_16@eeData,w
  4198  031F  0091               	movwf	17	;volatile
  4199  0320                     l374:	
  4200                           ;i2c_eeprom.c: 150:     while (!SSPIF);
  4201                           
  4202  0320  0020               	movlb	0	; select bank0
  4203  0321  1D91               	btfss	17,3	;volatile
  4204  0322  2B20               	goto	l374
  4205                           
  4206                           ;i2c_eeprom.c: 151:     PIR1bits.SSPIF = 0;
  4207  0323  1191               	bcf	17,3	;volatile
  4208                           
  4209                           ;i2c_eeprom.c: 153:     SSPCON2bits.PEN = 1;
  4210  0324  0024               	movlb	4	; select bank4
  4211  0325  1516               	bsf	22,2	;volatile
  4212  0326                     l377:	
  4213                           ;i2c_eeprom.c: 154:     while (PEN);
  4214                           
  4215  0326  1D16               	btfss	22,2	;volatile
  4216  0327  0008               	return
  4217  0328  2B26               	goto	l377
  4218  0329                     __end_of_eeprom_write_16:	
  4219                           
  4220                           	psect	text25
  4221  03C5                     __ptext25:	
  4222 ;; *************** function _init_structs *****************
  4223 ;; Defined at:
  4224 ;;		line 203 in file "counter_1512.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;		None
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;		None
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  1    wreg      void 
  4231 ;; Registers used:
  4232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMMON   BANK0   BANK1
  4238 ;;      Params:         0       0       0
  4239 ;;      Locals:         0       0       0
  4240 ;;      Temps:          1       0       0
  4241 ;;      Totals:         1       0       0
  4242 ;;Total ram usage:        1 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; Hardware stack levels required when called:    3
  4245 ;; This function calls:
  4246 ;;		_create_seg_disp_47
  4247 ;;		_create_switch
  4248 ;; This function is called by:
  4249 ;;		_main
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253                           
  4254                           ;psect for function _init_structs
  4255  03C5                     _init_structs:	
  4256                           
  4257                           ;counter_1512.c: 206:     p_btns[0] = &v_btns[0];
  4258                           
  4259                           ;incstack = 0
  4260                           ; Regs used in _init_structs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4261  03C5  3038               	movlw	(low (_v_btns| 0))& (0+255)
  4262  03C6  00F2               	movwf	??_init_structs
  4263  03C7  0872               	movf	??_init_structs,w
  4264  03C8  0020               	movlb	0	; select bank0
  4265  03C9  00A5               	movwf	_p_btns
  4266                           
  4267                           ;counter_1512.c: 207:     p_btns[1] = &v_btns[1];
  4268  03CA  3039               	movlw	(low ((_v_btns| 0+1)))& (0+255)
  4269  03CB  00F2               	movwf	??_init_structs
  4270  03CC  0872               	movf	??_init_structs,w
  4271  03CD  00A6               	movwf	low ((_p_btns| 0+1))
  4272                           
  4273                           ;counter_1512.c: 208:     p_btns[2] = &v_btns[2];
  4274  03CE  303A               	movlw	(low ((_v_btns| 0+2)))& (0+255)
  4275  03CF  00F2               	movwf	??_init_structs
  4276  03D0  0872               	movf	??_init_structs,w
  4277  03D1  00A7               	movwf	low ((_p_btns| 0+2))
  4278                           
  4279                           ;counter_1512.c: 209:     p_btns[3] = &v_btns[3];
  4280  03D2  303B               	movlw	(low ((_v_btns| 0+3)))& (0+255)
  4281  03D3  00F2               	movwf	??_init_structs
  4282  03D4  0872               	movf	??_init_structs,w
  4283  03D5  00A8               	movwf	low ((_p_btns| 0+3))
  4284                           
  4285                           ;counter_1512.c: 210:     p_btns[4] = &v_btns[4];
  4286  03D6  303C               	movlw	(low ((_v_btns| 0+4)))& (0+255)
  4287  03D7  00F2               	movwf	??_init_structs
  4288  03D8  0872               	movf	??_init_structs,w
  4289  03D9  00A9               	movwf	low ((_p_btns| 0+4))
  4290                           
  4291                           ;counter_1512.c: 212:     create_switch(p_btns[0]);
  4292  03DA  0825               	movf	_p_btns,w
  4293  03DB  2430               	fcall	_create_switch
  4294                           
  4295                           ;counter_1512.c: 213:     create_switch(p_btns[1]);
  4296  03DC  0020               	movlb	0	; select bank0
  4297  03DD  0826               	movf	low ((_p_btns| 0+1)),w
  4298  03DE  2430               	fcall	_create_switch
  4299                           
  4300                           ;counter_1512.c: 214:     create_switch(p_btns[2]);
  4301  03DF  0020               	movlb	0	; select bank0
  4302  03E0  0827               	movf	low ((_p_btns| 0+2)),w
  4303  03E1  2430               	fcall	_create_switch
  4304                           
  4305                           ;counter_1512.c: 215:     create_switch(p_btns[3]);
  4306  03E2  0020               	movlb	0	; select bank0
  4307  03E3  0828               	movf	low ((_p_btns| 0+3)),w
  4308  03E4  2430               	fcall	_create_switch
  4309                           
  4310                           ;counter_1512.c: 216:     create_switch(p_btns[4]);
  4311  03E5  0020               	movlb	0	; select bank0
  4312  03E6  0829               	movf	low ((_p_btns| 0+4)),w
  4313  03E7  2430               	fcall	_create_switch
  4314                           
  4315                           ;counter_1512.c: 219:     p_disp = &v_disp;
  4316  03E8  3041               	movlw	(low (_v_disp| 0))& (0+255)
  4317  03E9  00F2               	movwf	??_init_structs
  4318  03EA  0872               	movf	??_init_structs,w
  4319  03EB  0020               	movlb	0	; select bank0
  4320  03EC  00D2               	movwf	_p_disp
  4321                           
  4322                           ;counter_1512.c: 220:     create_seg_disp_47 (p_disp);
  4323  03ED  0852               	movf	_p_disp,w
  4324  03EE  24B9               	fcall	_create_seg_disp_47
  4325  03EF  0008               	return
  4326  03F0                     __end_of_init_structs:	
  4327                           
  4328                           	psect	text26
  4329  0430                     __ptext26:	
  4330 ;; *************** function _create_switch *****************
  4331 ;; Defined at:
  4332 ;;		line 9 in file "switches.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;  s_t             1    wreg     PTR struct .
  4335 ;;		 -> v_btns(5), 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  s_t             1    1[COMMON] PTR struct .
  4338 ;;		 -> v_btns(5), 
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  1    wreg      void 
  4341 ;; Registers used:
  4342 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMMON   BANK0   BANK1
  4348 ;;      Params:         0       0       0
  4349 ;;      Locals:         1       0       0
  4350 ;;      Temps:          1       0       0
  4351 ;;      Totals:         2       0       0
  4352 ;;Total ram usage:        2 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:    2
  4355 ;; This function calls:
  4356 ;;		Nothing
  4357 ;; This function is called by:
  4358 ;;		_init_structs
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           
  4363                           ;psect for function _create_switch
  4364  0430                     _create_switch:	
  4365                           
  4366                           ;incstack = 0
  4367                           ; Regs used in _create_switch: [wreg+fsr1l+fsr1h+status,2+status,0]
  4368                           ;create_switch@s_t stored from wreg
  4369  0430  00F1               	movwf	create_switch@s_t
  4370                           
  4371                           ;switches.c: 12:     s_t->state = 1;
  4372  0431  0871               	movf	create_switch@s_t,w
  4373  0432  0086               	movwf	6
  4374  0433  0187               	clrf	7
  4375  0434  1481               	bsf	1,1
  4376                           
  4377                           ;switches.c: 13:     s_t->prev = s_t->state;
  4378  0435  0871               	movf	create_switch@s_t,w
  4379  0436  0086               	movwf	6
  4380  0437  0187               	clrf	7
  4381  0438  0C01               	rrf	1,w
  4382  0439  3901               	andlw	1
  4383  043A  00F0               	movwf	??_create_switch
  4384  043B  0871               	movf	create_switch@s_t,w
  4385  043C  0086               	movwf	6
  4386  043D  0187               	clrf	7
  4387  043E  0801               	movf	1,w
  4388  043F  0670               	xorwf	??_create_switch,w
  4389  0440  39FE               	andlw	-2
  4390  0441  0670               	xorwf	??_create_switch,w
  4391  0442  0081               	movwf	1
  4392                           
  4393                           ;switches.c: 15:     s_t->streak = 0;
  4394  0443  0871               	movf	create_switch@s_t,w
  4395  0444  0086               	movwf	6
  4396  0445  0187               	clrf	7
  4397  0446  3083               	movlw	-125
  4398  0447  0581               	andwf	1,f
  4399                           
  4400                           ;switches.c: 16:     s_t->status = 0;
  4401  0448  0871               	movf	create_switch@s_t,w
  4402  0449  0086               	movwf	6
  4403  044A  0187               	clrf	7
  4404  044B  1381               	bcf	1,7
  4405  044C  0008               	return
  4406  044D                     __end_of_create_switch:	
  4407                           
  4408                           	psect	text27
  4409  04B9                     __ptext27:	
  4410 ;; *************** function _create_seg_disp_47 *****************
  4411 ;; Defined at:
  4412 ;;		line 135 in file "segmentdisplay47.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;  s_t             1    wreg     PTR struct .
  4415 ;;		 -> NULL(0), v_disp(3), 
  4416 ;; Auto vars:     Size  Location     Type
  4417 ;;  s_t             1    0[COMMON] PTR struct .
  4418 ;;		 -> NULL(0), v_disp(3), 
  4419 ;; Return value:  Size  Location     Type
  4420 ;;                  1    wreg      void 
  4421 ;; Registers used:
  4422 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4423 ;; Tracked objects:
  4424 ;;		On entry : 0/0
  4425 ;;		On exit  : 0/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMMON   BANK0   BANK1
  4428 ;;      Params:         0       0       0
  4429 ;;      Locals:         1       0       0
  4430 ;;      Temps:          0       0       0
  4431 ;;      Totals:         1       0       0
  4432 ;;Total ram usage:        1 bytes
  4433 ;; Hardware stack levels used:    1
  4434 ;; Hardware stack levels required when called:    2
  4435 ;; This function calls:
  4436 ;;		Nothing
  4437 ;; This function is called by:
  4438 ;;		_init_structs
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           
  4443                           ;psect for function _create_seg_disp_47
  4444  04B9                     _create_seg_disp_47:	
  4445                           
  4446                           ;incstack = 0
  4447                           ; Regs used in _create_seg_disp_47: [wreg+fsr1l+fsr1h+status,2+status,0]
  4448                           ;create_seg_disp_47@s_t stored from wreg
  4449  04B9  00F0               	movwf	create_seg_disp_47@s_t
  4450                           
  4451                           ;segmentdisplay47.c: 136:     s_t->digit = 0;
  4452  04BA  0870               	movf	create_seg_disp_47@s_t,w
  4453  04BB  0086               	movwf	6
  4454  04BC  0187               	clrf	7
  4455  04BD  30FC               	movlw	-4
  4456  04BE  0581               	andwf	1,f
  4457                           
  4458                           ;segmentdisplay47.c: 137:     s_t->value_lo = 0;
  4459  04BF  0A70               	incf	create_seg_disp_47@s_t,w
  4460  04C0  0086               	movwf	6
  4461  04C1  0187               	clrf	7
  4462  04C2  0181               	clrf	1
  4463                           
  4464                           ;segmentdisplay47.c: 138:     s_t->value_hi = 0;
  4465  04C3  0870               	movf	create_seg_disp_47@s_t,w
  4466  04C4  3E02               	addlw	2
  4467  04C5  0086               	movwf	6
  4468  04C6  0187               	clrf	7
  4469  04C7  30C0               	movlw	-64
  4470  04C8  0581               	andwf	1,f
  4471                           
  4472                           ;segmentdisplay47.c: 139:     s_t->status = 1;
  4473  04C9  0870               	movf	create_seg_disp_47@s_t,w
  4474  04CA  3E02               	addlw	2
  4475  04CB  0086               	movwf	6
  4476  04CC  0187               	clrf	7
  4477  04CD  1701               	bsf	1,6
  4478  04CE  0008               	return
  4479  04CF                     __end_of_create_seg_disp_47:	
  4480                           
  4481                           	psect	text28
  4482  056F                     __ptext28:	
  4483 ;; *************** function _init *****************
  4484 ;; Defined at:
  4485 ;;		line 5 in file "init.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;		None
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;		None
  4490 ;; Return value:  Size  Location     Type
  4491 ;;                  1    wreg      void 
  4492 ;; Registers used:
  4493 ;;		wreg, status,2, status,0, pclath, cstack
  4494 ;; Tracked objects:
  4495 ;;		On entry : 0/0
  4496 ;;		On exit  : 0/0
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMMON   BANK0   BANK1
  4499 ;;      Params:         0       0       0
  4500 ;;      Locals:         0       0       0
  4501 ;;      Temps:          0       0       0
  4502 ;;      Totals:         0       0       0
  4503 ;;Total ram usage:        0 bytes
  4504 ;; Hardware stack levels used:    1
  4505 ;; Hardware stack levels required when called:    4
  4506 ;; This function calls:
  4507 ;;		_init_i2c
  4508 ;;		_init_interrupt
  4509 ;;		_init_oscillerator
  4510 ;;		_init_ports
  4511 ;; This function is called by:
  4512 ;;		_main
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           
  4517                           ;psect for function _init
  4518  056F                     _init:	
  4519                           
  4520                           ;init.c: 6:     init_oscillerator();
  4521                           
  4522                           ;incstack = 0
  4523                           ; Regs used in _init: [wreg+status,2+status,0+pclath+cstack]
  4524  056F  254B               	fcall	_init_oscillerator
  4525                           
  4526                           ;init.c: 7:     init_ports();
  4527  0570  2574               	fcall	_init_ports
  4528                           
  4529                           ;init.c: 8:     init_i2c();
  4530  0571  252C               	fcall	_init_i2c
  4531                           
  4532                           ;init.c: 9:     init_interrupt();
  4533  0572  2577               	fcall	_init_interrupt
  4534  0573  0008               	return
  4535  0574                     __end_of_init:	
  4536                           
  4537                           	psect	text29
  4538  0574                     __ptext29:	
  4539 ;; *************** function _init_ports *****************
  4540 ;; Defined at:
  4541 ;;		line 16 in file "init.c"
  4542 ;; Parameters:    Size  Location     Type
  4543 ;;		None
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;		None
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  1    wreg      void 
  4548 ;; Registers used:
  4549 ;;		status,2, status,0, pclath, cstack
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMMON   BANK0   BANK1
  4555 ;;      Params:         0       0       0
  4556 ;;      Locals:         0       0       0
  4557 ;;      Temps:          0       0       0
  4558 ;;      Totals:         0       0       0
  4559 ;;Total ram usage:        0 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    3
  4562 ;; This function calls:
  4563 ;;		_res_ports
  4564 ;;		_set_ports
  4565 ;; This function is called by:
  4566 ;;		_init
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570                           
  4571                           ;psect for function _init_ports
  4572  0574                     _init_ports:	
  4573                           
  4574                           ;init.c: 17:     res_ports ();
  4575                           
  4576                           ;incstack = 0
  4577                           ; Regs used in _init_ports: [status,2+status,0+pclath+cstack]
  4578  0574  2509               	fcall	_res_ports
  4579                           
  4580                           ;init.c: 18:     set_ports ();
  4581  0575  2544               	fcall	_set_ports
  4582  0576  0008               	return
  4583  0577                     __end_of_init_ports:	
  4584                           
  4585                           	psect	text30
  4586  0544                     __ptext30:	
  4587 ;; *************** function _set_ports *****************
  4588 ;; Defined at:
  4589 ;;		line 40 in file "init.c"
  4590 ;; Parameters:    Size  Location     Type
  4591 ;;		None
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;		None
  4594 ;; Return value:  Size  Location     Type
  4595 ;;                  1    wreg      void 
  4596 ;; Registers used:
  4597 ;;		None
  4598 ;; Tracked objects:
  4599 ;;		On entry : 0/0
  4600 ;;		On exit  : 0/0
  4601 ;;		Unchanged: 0/0
  4602 ;; Data sizes:     COMMON   BANK0   BANK1
  4603 ;;      Params:         0       0       0
  4604 ;;      Locals:         0       0       0
  4605 ;;      Temps:          0       0       0
  4606 ;;      Totals:         0       0       0
  4607 ;;Total ram usage:        0 bytes
  4608 ;; Hardware stack levels used:    1
  4609 ;; Hardware stack levels required when called:    2
  4610 ;; This function calls:
  4611 ;;		Nothing
  4612 ;; This function is called by:
  4613 ;;		_init_ports
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           
  4618                           ;psect for function _set_ports
  4619  0544                     _set_ports:	
  4620                           
  4621                           ;init.c: 42:     TRISBbits.TRISB4 = 1;
  4622                           
  4623                           ;incstack = 0
  4624                           ; Regs used in _set_ports: []
  4625  0544  0021               	movlb	1	; select bank1
  4626  0545  160D               	bsf	13,4	;volatile
  4627                           
  4628                           ;init.c: 43:     TRISBbits.TRISB5 = 1;
  4629  0546  168D               	bsf	13,5	;volatile
  4630                           
  4631                           ;init.c: 44:     TRISBbits.TRISB6 = 1;
  4632  0547  170D               	bsf	13,6	;volatile
  4633                           
  4634                           ;init.c: 45:     TRISBbits.TRISB7 = 1;
  4635  0548  178D               	bsf	13,7	;volatile
  4636                           
  4637                           ;init.c: 46:     TRISCbits.TRISC5 = 1;
  4638  0549  168E               	bsf	14,5	;volatile
  4639  054A  0008               	return
  4640  054B                     __end_of_set_ports:	
  4641                           
  4642                           	psect	text31
  4643  0509                     __ptext31:	
  4644 ;; *************** function _res_ports *****************
  4645 ;; Defined at:
  4646 ;;		line 22 in file "init.c"
  4647 ;; Parameters:    Size  Location     Type
  4648 ;;		None
  4649 ;; Auto vars:     Size  Location     Type
  4650 ;;		None
  4651 ;; Return value:  Size  Location     Type
  4652 ;;                  1    wreg      void 
  4653 ;; Registers used:
  4654 ;;		status,2
  4655 ;; Tracked objects:
  4656 ;;		On entry : 0/0
  4657 ;;		On exit  : 0/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMMON   BANK0   BANK1
  4660 ;;      Params:         0       0       0
  4661 ;;      Locals:         0       0       0
  4662 ;;      Temps:          0       0       0
  4663 ;;      Totals:         0       0       0
  4664 ;;Total ram usage:        0 bytes
  4665 ;; Hardware stack levels used:    1
  4666 ;; Hardware stack levels required when called:    2
  4667 ;; This function calls:
  4668 ;;		Nothing
  4669 ;; This function is called by:
  4670 ;;		_init_ports
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           
  4675                           ;psect for function _res_ports
  4676  0509                     _res_ports:	
  4677                           
  4678                           ;init.c: 24:     TRISA = 0x00;
  4679                           
  4680                           ;incstack = 0
  4681                           ; Regs used in _res_ports: [status,2]
  4682  0509  0021               	movlb	1	; select bank1
  4683  050A  018C               	clrf	12	;volatile
  4684                           
  4685                           ;init.c: 25:     TRISB = 0x00;
  4686  050B  018D               	clrf	13	;volatile
  4687                           
  4688                           ;init.c: 26:     TRISC = 0x00;
  4689  050C  018E               	clrf	14	;volatile
  4690                           
  4691                           ;init.c: 29:     LATA = 0x00;
  4692  050D  0022               	movlb	2	; select bank2
  4693  050E  018C               	clrf	12	;volatile
  4694                           
  4695                           ;init.c: 30:     LATB = 0x00;
  4696  050F  018D               	clrf	13	;volatile
  4697                           
  4698                           ;init.c: 31:     LATC = 0x00;
  4699  0510  018E               	clrf	14	;volatile
  4700                           
  4701                           ;init.c: 34:     ANSELA = 0x00;
  4702  0511  0023               	movlb	3	; select bank3
  4703  0512  018C               	clrf	12	;volatile
  4704                           
  4705                           ;init.c: 35:     ANSELB = 0x00;
  4706  0513  018D               	clrf	13	;volatile
  4707                           
  4708                           ;init.c: 36:     ANSELC = 0x00;
  4709  0514  018E               	clrf	14	;volatile
  4710  0515  0008               	return
  4711  0516                     __end_of_res_ports:	
  4712                           
  4713                           	psect	text32
  4714  054B                     __ptext32:	
  4715 ;; *************** function _init_oscillerator *****************
  4716 ;; Defined at:
  4717 ;;		line 12 in file "init.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;		None
  4720 ;; Auto vars:     Size  Location     Type
  4721 ;;		None
  4722 ;; Return value:  Size  Location     Type
  4723 ;;                  1    wreg      void 
  4724 ;; Registers used:
  4725 ;;		wreg, status,2, status,0
  4726 ;; Tracked objects:
  4727 ;;		On entry : 0/0
  4728 ;;		On exit  : 0/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMMON   BANK0   BANK1
  4731 ;;      Params:         0       0       0
  4732 ;;      Locals:         0       0       0
  4733 ;;      Temps:          0       0       0
  4734 ;;      Totals:         0       0       0
  4735 ;;Total ram usage:        0 bytes
  4736 ;; Hardware stack levels used:    1
  4737 ;; Hardware stack levels required when called:    2
  4738 ;; This function calls:
  4739 ;;		Nothing
  4740 ;; This function is called by:
  4741 ;;		_init
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           
  4746                           ;psect for function _init_oscillerator
  4747  054B                     _init_oscillerator:	
  4748                           
  4749                           ;init.c: 13:     OSCCONbits.SCS1 = 1;
  4750                           
  4751                           ;incstack = 0
  4752                           ; Regs used in _init_oscillerator: [wreg+status,2+status,0]
  4753  054B  0021               	movlb	1	; select bank1
  4754  054C  1499               	bsf	25,1	;volatile
  4755                           
  4756                           ;init.c: 14:     OSCCONbits.IRCF = 0b1110;
  4757  054D  0819               	movf	25,w	;volatile
  4758  054E  3987               	andlw	-121
  4759  054F  3870               	iorlw	112
  4760  0550  0099               	movwf	25	;volatile
  4761  0551  0008               	return
  4762  0552                     __end_of_init_oscillerator:	
  4763                           
  4764                           	psect	text33
  4765  0577                     __ptext33:	
  4766 ;; *************** function _init_interrupt *****************
  4767 ;; Defined at:
  4768 ;;		line 67 in file "init.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;		None
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;		None
  4773 ;; Return value:  Size  Location     Type
  4774 ;;                  1    wreg      void 
  4775 ;; Registers used:
  4776 ;;		wreg, status,2, status,0, pclath, cstack
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMMON   BANK0   BANK1
  4782 ;;      Params:         0       0       0
  4783 ;;      Locals:         0       0       0
  4784 ;;      Temps:          0       0       0
  4785 ;;      Totals:         0       0       0
  4786 ;;Total ram usage:        0 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; Hardware stack levels required when called:    3
  4789 ;; This function calls:
  4790 ;;		_init_interrupt_timer
  4791 ;; This function is called by:
  4792 ;;		_init
  4793 ;; This function uses a non-reentrant model
  4794 ;;
  4795                           
  4796                           
  4797                           ;psect for function _init_interrupt
  4798  0577                     _init_interrupt:	
  4799                           
  4800                           ;init.c: 69:     init_interrupt_timer ();
  4801                           
  4802                           ;incstack = 0
  4803                           ; Regs used in _init_interrupt: [wreg+status,2+status,0+pclath+cstack]
  4804  0577  2516               	fcall	_init_interrupt_timer
  4805                           
  4806                           ;init.c: 72:     INTCONbits.GIE = 1;
  4807  0578  178B               	bsf	11,7	;volatile
  4808  0579  0008               	return
  4809  057A                     __end_of_init_interrupt:	
  4810                           
  4811                           	psect	text34
  4812  0516                     __ptext34:	
  4813 ;; *************** function _init_interrupt_timer *****************
  4814 ;; Defined at:
  4815 ;;		line 76 in file "init.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;		None
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;		None
  4820 ;; Return value:  Size  Location     Type
  4821 ;;                  1    wreg      void 
  4822 ;; Registers used:
  4823 ;;		wreg, status,2, status,0
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMMON   BANK0   BANK1
  4829 ;;      Params:         0       0       0
  4830 ;;      Locals:         0       0       0
  4831 ;;      Temps:          0       0       0
  4832 ;;      Totals:         0       0       0
  4833 ;;Total ram usage:        0 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    2
  4836 ;; This function calls:
  4837 ;;		Nothing
  4838 ;; This function is called by:
  4839 ;;		_init_interrupt
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           
  4844                           ;psect for function _init_interrupt_timer
  4845  0516                     _init_interrupt_timer:	
  4846                           
  4847                           ;init.c: 78:     OPTION_REGbits.PSA = 0;
  4848                           
  4849                           ;incstack = 0
  4850                           ; Regs used in _init_interrupt_timer: [wreg+status,2+status,0]
  4851  0516  0021               	movlb	1	; select bank1
  4852  0517  1195               	bcf	21,3	;volatile
  4853                           
  4854                           ;init.c: 80:     OPTION_REGbits.PS = 0b100;
  4855  0518  0815               	movf	21,w	;volatile
  4856  0519  39F8               	andlw	-8
  4857  051A  3804               	iorlw	4
  4858  051B  0095               	movwf	21	;volatile
  4859                           
  4860                           ;init.c: 83:     OPTION_REGbits.TMR0CS = 0;
  4861  051C  1295               	bcf	21,5	;volatile
  4862                           
  4863                           ;init.c: 86:     OPTION_REGbits.TMR0SE = 0;
  4864  051D  1215               	bcf	21,4	;volatile
  4865                           
  4866                           ;init.c: 90:     T0IE = 1;
  4867  051E  168B               	bsf	11,5	;volatile
  4868                           
  4869                           ;init.c: 92:     TMR0 = 0;
  4870  051F  0020               	movlb	0	; select bank0
  4871  0520  0195               	clrf	21	;volatile
  4872  0521  0008               	return
  4873  0522                     __end_of_init_interrupt_timer:	
  4874                           
  4875                           	psect	text35
  4876  052C                     __ptext35:	
  4877 ;; *************** function _init_i2c *****************
  4878 ;; Defined at:
  4879 ;;		line 49 in file "init.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;		None
  4882 ;; Auto vars:     Size  Location     Type
  4883 ;;		None
  4884 ;; Return value:  Size  Location     Type
  4885 ;;                  1    wreg      void 
  4886 ;; Registers used:
  4887 ;;		wreg
  4888 ;; Tracked objects:
  4889 ;;		On entry : 0/0
  4890 ;;		On exit  : 0/0
  4891 ;;		Unchanged: 0/0
  4892 ;; Data sizes:     COMMON   BANK0   BANK1
  4893 ;;      Params:         0       0       0
  4894 ;;      Locals:         0       0       0
  4895 ;;      Temps:          0       0       0
  4896 ;;      Totals:         0       0       0
  4897 ;;Total ram usage:        0 bytes
  4898 ;; Hardware stack levels used:    1
  4899 ;; Hardware stack levels required when called:    2
  4900 ;; This function calls:
  4901 ;;		Nothing
  4902 ;; This function is called by:
  4903 ;;		_init
  4904 ;; This function uses a non-reentrant model
  4905 ;;
  4906                           
  4907                           
  4908                           ;psect for function _init_i2c
  4909  052C                     _init_i2c:	
  4910                           
  4911                           ;init.c: 51:     TRISCbits.TRISC3 = 1;
  4912                           
  4913                           ;incstack = 0
  4914                           ; Regs used in _init_i2c: [wreg]
  4915  052C  0021               	movlb	1	; select bank1
  4916  052D  158E               	bsf	14,3	;volatile
  4917                           
  4918                           ;init.c: 52:     TRISCbits.TRISC4 = 1;
  4919  052E  160E               	bsf	14,4	;volatile
  4920                           
  4921                           ;init.c: 59:     SSPADD = 19;
  4922  052F  3013               	movlw	19
  4923  0530  0024               	movlb	4	; select bank4
  4924  0531  0092               	movwf	18	;volatile
  4925                           
  4926                           ;init.c: 63:     SSPCON1 = 0x28;
  4927  0532  3028               	movlw	40
  4928  0533  0095               	movwf	21	;volatile
  4929  0534  0008               	return
  4930  0535                     __end_of_init_i2c:	
  4931                           
  4932                           	psect	intentry
  4933  0004                     __pintentry:	
  4934 ;; *************** function _interruptHandler *****************
  4935 ;; Defined at:
  4936 ;;		line 33 in file "interrupts.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;		None
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;		None
  4941 ;; Return value:  Size  Location     Type
  4942 ;;                  1    wreg      void 
  4943 ;; Registers used:
  4944 ;;		wreg, status,2, status,0, pclath, cstack
  4945 ;; Tracked objects:
  4946 ;;		On entry : 0/0
  4947 ;;		On exit  : 0/0
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMMON   BANK0   BANK1
  4950 ;;      Params:         0       0       0
  4951 ;;      Locals:         0       0       0
  4952 ;;      Temps:          0       0       0
  4953 ;;      Totals:         0       0       0
  4954 ;;Total ram usage:        0 bytes
  4955 ;; Hardware stack levels used:    1
  4956 ;; Hardware stack levels required when called:    1
  4957 ;; This function calls:
  4958 ;;		_on_interrupt_timer_0
  4959 ;; This function is called by:
  4960 ;;		Interrupt level 1
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964  0004                     _interruptHandler:	
  4965                           
  4966                           ;incstack = 0
  4967  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4968                           
  4969                           ; Regs used in _interruptHandler: [wreg+status,2+status,0+pclath+cstack]
  4970  0005  3180               	pagesel	$
  4971                           
  4972                           ;interrupts.c: 36:     if (T0IE && T0IF){
  4973  0006  1A8B               	btfsc	11,5	;volatile
  4974  0007  1D0B               	btfss	11,2	;volatile
  4975  0008  280B               	goto	i1l525
  4976                           
  4977                           ;interrupts.c: 37:         on_interrupt_timer_0();
  4978  0009  2411               	fcall	_on_interrupt_timer_0
  4979                           
  4980                           ;interrupts.c: 38:         T0IF = 0;
  4981  000A  110B               	bcf	11,2	;volatile
  4982  000B                     i1l525:	
  4983  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4984  000C  0009               	retfie
  4985  000D                     __end_of_interruptHandler:	
  4986                           
  4987                           	psect	text37
  4988  0411                     __ptext37:	
  4989 ;; *************** function _on_interrupt_timer_0 *****************
  4990 ;; Defined at:
  4991 ;;		line 9 in file "interrupts.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;		None
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;		None
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  1    wreg      void 
  4998 ;; Registers used:
  4999 ;;		wreg, status,2
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMMON   BANK0   BANK1
  5005 ;;      Params:         0       0       0
  5006 ;;      Locals:         0       0       0
  5007 ;;      Temps:          0       0       0
  5008 ;;      Totals:         0       0       0
  5009 ;;Total ram usage:        0 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; This function calls:
  5012 ;;		Nothing
  5013 ;; This function is called by:
  5014 ;;		_interruptHandler
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           
  5019                           ;psect for function _on_interrupt_timer_0
  5020  0411                     _on_interrupt_timer_0:	
  5021                           
  5022                           ;interrupts.c: 14:     seg_disp_sleep++;
  5023                           
  5024                           ;incstack = 0
  5025                           ; Regs used in _on_interrupt_timer_0: [wreg+status,2]
  5026  0411  3001               	movlw	1
  5027  0412  0020               	movlb	0	; select bank0
  5028  0413  07AC               	addwf	_seg_disp_sleep,f
  5029  0414  3000               	movlw	0
  5030  0415  3DAD               	addwfc	_seg_disp_sleep+1,f
  5031                           
  5032                           ;interrupts.c: 15:     if (seg_disp_sleep >= 14648){
  5033  0416  3039               	movlw	57
  5034  0417  022D               	subwf	_seg_disp_sleep+1,w
  5035  0418  3038               	movlw	56
  5036  0419  1903               	skipnz
  5037  041A  022C               	subwf	_seg_disp_sleep,w
  5038  041B  1C03               	skipc
  5039  041C  2C20               	goto	i1l2332
  5040                           
  5041                           ;interrupts.c: 16:         seg_disp_sleep = 0;
  5042  041D  01AC               	clrf	_seg_disp_sleep
  5043  041E  01AD               	clrf	_seg_disp_sleep+1
  5044                           
  5045                           ;interrupts.c: 17:         INT_FLAGS.seg_disp_sleep = 1;
  5046  041F  1437               	bsf	_INT_FLAGS,0	;volatile
  5047  0420                     i1l2332:	
  5048                           
  5049                           ;interrupts.c: 20:     INT_FLAGS.seg_disp_vis = 1;
  5050  0420  1537               	bsf	_INT_FLAGS,2	;volatile
  5051                           
  5052                           ;interrupts.c: 22:     seg_disp_save++;
  5053  0421  3001               	movlw	1
  5054  0422  07AA               	addwf	_seg_disp_save,f
  5055  0423  3000               	movlw	0
  5056  0424  3DAB               	addwfc	_seg_disp_save+1,f
  5057                           
  5058                           ;interrupts.c: 23:     if (seg_disp_save >= 1464){
  5059  0425  3005               	movlw	5
  5060  0426  022B               	subwf	_seg_disp_save+1,w
  5061  0427  30B8               	movlw	184
  5062  0428  1903               	skipnz
  5063  0429  022A               	subwf	_seg_disp_save,w
  5064  042A  1C03               	skipc
  5065  042B  0008               	return
  5066                           
  5067                           ;interrupts.c: 24:         seg_disp_save = 0;
  5068  042C  01AA               	clrf	_seg_disp_save
  5069  042D  01AB               	clrf	_seg_disp_save+1
  5070                           
  5071                           ;interrupts.c: 25:         INT_FLAGS.seg_disp_save = 1;
  5072  042E  15B7               	bsf	_INT_FLAGS,3	;volatile
  5073  042F  0008               	return
  5074  0430                     __end_of_on_interrupt_timer_0:	
  5075  007E                     btemp	set	126	;btemp
  5076  007E                     int$flags	set	126
  5077  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         36
    Persistent  33
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     14      51
    BANK1            32      0       0

Pointer List with Targets:

    seg_disp_47_off@s_t	PTR struct . size(1) Largest target is 3
		 -> NULL(NULL[0]), v_disp(BANK0[3]), 

    seg_disp_47_on@s_t	PTR struct . size(1) Largest target is 3
		 -> NULL(NULL[0]), v_disp(BANK0[3]), 

    seg_disp_47_set_val@s_t	PTR struct . size(1) Largest target is 3
		 -> NULL(NULL[0]), v_disp(BANK0[3]), 

    seg_disp_47_get_val@s_t	PTR struct . size(1) Largest target is 3
		 -> NULL(NULL[0]), v_disp(BANK0[3]), 

    update_seg_disp_47@s_t	PTR struct . size(1) Largest target is 3
		 -> NULL(NULL[0]), v_disp(BANK0[3]), 

    create_seg_disp_47@s_t	PTR struct . size(1) Largest target is 3
		 -> NULL(NULL[0]), v_disp(BANK0[3]), 

    vis_next_digit@s_t	PTR struct . size(1) Largest target is 3
		 -> NULL(NULL[0]), v_disp(BANK0[3]), 

    sp__eeprom_sequential_4_read	PTR unsigned char  size(1) Largest target is 4
		 -> ee_seq_4(BANK0[4]), NULL(NULL[0]), 

    update_switch@s_t	PTR struct . size(1) Largest target is 5
		 -> v_btns(BANK0[5]), 

    create_switch@s_t	PTR struct . size(1) Largest target is 5
		 -> v_btns(BANK0[5]), 

    p_btns	PTR struct .[5] size(1) Largest target is 5
		 -> v_btns(BANK0[5]), 

    p_disp	PTR struct . size(1) Largest target is 3
		 -> NULL(NULL[0]), v_disp(BANK0[3]), 


Critical Paths under _main in COMMON

    _main->_change_category
    _update_switches->_change_category
    _change_category->_get_cat_val
    _get_cat_val->_eeprom_read_16
    _update_seg_disp_47->_seg_disp_47_set_val
    _vis_next_digit->___lwmod
    ___lwmod->___lwdiv
    _cat_auto_save->_set_cat_val
    _rst_storage->_set_cat_val
    _set_cat_val->_eeprom_write_16
    _init_structs->_create_switch

Critical Paths under _interruptHandler in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_update_switches
    _change_category->_get_cat_val
    _update_int_flags->_vis_next_digit
    _cat_auto_save->_set_cat_val
    _rst_storage->_set_cat_val

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   11855
                                             11 BANK0      3     3      0
                    _change_category
                     _eeprom_read_16
                    _eeprom_write_16
                        _get_cat_val
                               _init
                       _init_structs
                        _rst_storage
                   _update_int_flags
                 _update_seg_disp_47
                    _update_switches
 ---------------------------------------------------------------------------------
 (1) _update_switches                                      4     4      0    4401
                                              7 BANK0      4     4      0
                    _change_category
                          _decrement
                  _get_switch_status
                  _get_switch_toggle
                          _increment
                     _seg_disp_awake
                        _set_cat_val
                      _update_switch
 ---------------------------------------------------------------------------------
 (2) _update_switch                                       10     5      5    1233
                                              0 COMMON    10     5      5
 ---------------------------------------------------------------------------------
 (2) _seg_disp_awake                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _increment                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _get_switch_toggle                                    4     3      1     394
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _get_switch_status                                    1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _decrement                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _change_category                                      2     2      0    1565
                                             12 COMMON     2     2      0
                        _get_cat_val
                        _set_cat_val
 ---------------------------------------------------------------------------------
 (3) _get_cat_val                                         12    10      2     491
                                              7 COMMON     5     3      2
                                              0 BANK0      7     7      0
                     _eeprom_read_16
 ---------------------------------------------------------------------------------
 (4) _eeprom_read_16                                       7     5      2     309
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _update_seg_disp_47                                   3     1      2     350
                                              5 COMMON     3     1      2
                _seg_disp_47_set_val
 ---------------------------------------------------------------------------------
 (2) _seg_disp_47_set_val                                  5     3      2     197
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _update_int_flags                                     0     0      0    2715
                      _cat_auto_save
                    _seg_disp_47_off
                     _seg_disp_47_on
                     _vis_next_digit
 ---------------------------------------------------------------------------------
 (2) _vis_next_digit                                      11    11      0    1553
                                              0 BANK0     11    11      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                _seg_disp_47_get_val
 ---------------------------------------------------------------------------------
 (3) _seg_disp_47_get_val                                  8     6      2     102
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     544
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _seg_disp_47_on                                       1     1      0      55
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _seg_disp_47_off                                      1     1      0      55
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _cat_auto_save                                        1     1      0    1052
                                             11 COMMON     1     1      0
                        _set_cat_val
 ---------------------------------------------------------------------------------
 (1) _rst_storage                                          2     2      0    1120
                                             11 COMMON     2     2      0
                        _set_cat_val
 ---------------------------------------------------------------------------------
 (2) _set_cat_val                                          8     6      2    1052
                                              7 COMMON     4     2      2
                                              0 BANK0      4     4      0
                    _eeprom_write_16
 ---------------------------------------------------------------------------------
 (3) _eeprom_write_16                                      7     4      3     438
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (1) _init_structs                                         1     1      0     396
                                              2 COMMON     1     1      0
                 _create_seg_disp_47
                      _create_switch
 ---------------------------------------------------------------------------------
 (2) _create_switch                                        2     2      0     275
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _create_seg_disp_47                                   1     1      0     121
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
                           _init_i2c
                     _init_interrupt
                  _init_oscillerator
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
                          _res_ports
                          _set_ports
 ---------------------------------------------------------------------------------
 (3) _set_ports                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _res_ports                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscillerator                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
               _init_interrupt_timer
 ---------------------------------------------------------------------------------
 (3) _init_interrupt_timer                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_i2c                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _interruptHandler                                     0     0      0       0
               _on_interrupt_timer_0
 ---------------------------------------------------------------------------------
 (6) _on_interrupt_timer_0                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _change_category
     _get_cat_val
       _eeprom_read_16
     _set_cat_val
       _eeprom_write_16
   _eeprom_read_16
   _eeprom_write_16
   _get_cat_val
     _eeprom_read_16
   _init
     _init_i2c
     _init_interrupt
       _init_interrupt_timer
     _init_oscillerator
     _init_ports
       _res_ports
       _set_ports
   _init_structs
     _create_seg_disp_47
     _create_switch
   _rst_storage
     _set_cat_val
       _eeprom_write_16
   _update_int_flags
     _cat_auto_save
       _set_cat_val
         _eeprom_write_16
     _seg_disp_47_off
     _seg_disp_47_on
     _vis_next_digit
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _seg_disp_47_get_val
   _update_seg_disp_47
     _seg_disp_47_set_val
   _update_switches
     _change_category
       _get_cat_val
         _eeprom_read_16
       _set_cat_val
         _eeprom_write_16
     _decrement
     _get_switch_status
     _get_switch_toggle
     _increment
     _seg_disp_awake
     _set_cat_val
       _eeprom_write_16
     _update_switch

 _interruptHandler (ROOT)
   _on_interrupt_timer_0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      41       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      E      33       6       63.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      41       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Oct 17 02:29:06 2019

         eeprom_read_16@addLow 0074                    __CFG_CP$OFF 0000                    _SSPSTATbits 0214  
             ??_init_interrupt 0070                             l96 00C6            ___wmul@multiplicand 0072  
                 get_cat_val@d 0049                   get_cat_val@i 004A          eeprom_read_16@addHigh 0073  
                _update_switch 0190                            l400 0221                            l410 0236  
                          l403 022D                            l420 024B                            l404 0229  
                          l413 0242                            l414 023E                            l423 024E  
                          l407 022E                            l360 0306                            l352 02F9  
                          l417 0243                            l371 031B                            l364 030E  
                          l356 0301                            l349 02F2                            l374 0320  
                          l382 01FE                            l367 0313                            l377 0326  
                          l393 0213                            l385 0205                            l397 021B  
                          l389 020D                            l666 048D                            _PEN 10B2  
                          _SEN 10B0                   __CFG_BORV$LO 0000                            wreg 0009  
                 __CFG_IESO$ON 0000         __end_of_seg_disp_47_on 0544                   __CFG_LVP$OFF 0000  
   __size_of_get_switch_toggle 0015                           l2024 038B                           l2016 036D  
                         l2040 039F                           l2120 00F1                           l2018 0379  
                         l2042 03AB                           l2050 03C0                           l2130 0143  
                         l2122 010C                           l2028 0394                           l2140 014D  
                         l2132 0145                           l2230 04FA                           l2046 03B7  
                         l2142 014F                           l2134 0147                           l2070 01E5  
        __end_of_cat_auto_save 0485                           l2144 0151                           l2136 0149  
                         l2128 0141                           l2152 0159                           l2312 045B  
                         l2304 0454                           l2146 0153                           l2138 014B  
                         l2154 0182                           l2082 04E2                           l2250 007A  
                         l2148 0155                           l2260 008B                           l2166 0476  
                         l2318 0461                           l2272 00A5                           l2290 00C8  
                         l2266 0098                           l2370 02DD                           l2362 02CA  
                         l2354 02BF                           l2284 00C3                           l2438 0162  
                         l2358 02C2                           l1912 031E                           l1904 0304  
                         l1920 025D                           l1930 026B                           l1908 0311  
                         l1860 0211                           l1956 033B                           l1868 021F  
                         l1994 0487     __size_of_get_switch_status 0005                           _T0IE 005D  
                         _T0IF 005A                           u2015 037A                           u2025 0384  
                         u2035 038C                           u2140 01D8                           _LATA 010C  
                         u2150 01D9                           _LATB 010D                           u2135 01C9  
                         _LATC 010E                           u2224 0139                           u2160 04D5  
                         u2065 03A2                           u2225 0136                           u2170 04DB  
                         u2162 04D6                           u2172 04DC                           u2245 0474  
                         u2085 03B1                           u2095 03B8                           u1904 028F  
                         u1905 028D                           u1955 048E                           u1965 0493  
                         u2677 02B2                           u1895 0286                           u2687 026E  
                         u2697 033E                           u1995 0370                           _TMR0 0015  
                         _RSEN 10B1                   __CFG_WRT$OFF 0000                  __CFG_FCMEN$ON 0000  
                  _rst_storage 04F9                           _main 02A2         __end_of_seg_disp_awake 055E  
     __end_of_interruptHandler 000D                           _init 056F                           fsr0h 0005  
                         fsr1h 0007                           indf0 0000                           fsr0l 0004  
                         indf1 0001                           fsr1l 0006                           btemp 007E  
                __CFG_BOREN$ON 0000  __size_of_init_interrupt_timer 000C                           start 000D  
               get_cat_val@val 0047        __end_of_seg_disp_47_off 052C                  __CFG_MCLRE$ON 0000  
              ??_create_switch 0070                _update_switches 0017                _change_category 04E4  
               ?_update_switch 0070         eeprom_read_16@tempData 0075         seg_disp_47_get_val@s_t 0077  
       seg_disp_47_get_val@val 0075         eeprom_read_16@slaveAdd 0076                          ?_main 0070  
             _update_int_flags 044D                          _ACKEN 10B4                          ?_init 0070  
                __CFG_WDTE$OFF 0000     __end_of_update_seg_disp_47 053D             _create_seg_disp_47 04B9  
              __end_of___lwdiv 0399                __end_of___lwmod 03C5                          i1l525 000B  
                        _TRISA 008C                          _TRISB 008D                          _TRISC 008E  
                        _SSPIF 008B                ?_seg_disp_47_on 0070            ?_create_seg_disp_47 0070  
                        main@f 0051                          main@k 0050                          status 0003  
                        wtemp0 007E                ?_seg_disp_awake 0070           _on_interrupt_timer_0 0411  
              __initialization 000E           ??_create_seg_disp_47 0070                   __end_of_main 02E7  
                 __end_of_init 0574       seg_disp_47_set_val@value 0070                 __CFG_LPBOR$OFF 0000  
                       ??_main 004F                         ??_init 0070                 _vis_next_digit 00DD  
             ??_eeprom_read_16 0072            _seg_disp_47_get_val 03F0                         _ANSELA 018C  
                       _ANSELB 018D                         _ANSELC 018E           get_switch_toggle@val 0073  
                       i1l2332 0420                         _SSPADD 0212                         _SSPBUF 0211  
          _seg_disp_47_set_val 04A0                   ?_set_cat_val 0077        __end_of_update_switches 00DD  
        ?_on_interrupt_timer_0 0070                 __CFG_PWRTE$OFF 0000        __end_of_change_category 04F9  
         __size_of_get_cat_val 0050              _init_oscillerator 054B           get_switch_status@s_t 0070  
             ?_seg_disp_47_off 0070                  ?_init_structs 0070                         ___wmul 0485  
           ?_init_oscillerator 0070                 __CFG_STVREN$ON 0000                ??_update_switch 0075  
         ?_seg_disp_47_get_val 0070                      ??___lwdiv 0074                      ??___lwmod 007C  
             __end_of_init_i2c 0535                         _p_disp 0052                         _p_btns 0025  
                       _v_disp 0041                         _v_btns 0038         __end_of_vis_next_digit 0190  
         ?_seg_disp_47_set_val 0070            ??_init_oscillerator 0070       __size_of_eeprom_write_16 0042  
         update_switches@value 004C        vis_next_digit@digit_val 0049        __end_of__initialization 0014  
        update_seg_disp_47@s_t 0077                  _last_save_cat 0034                  _last_save_val 002E  
       eeprom_write_16@addHigh 0075        change_category@category 007D      __end_of_init_oscillerator 0552  
               ??_init_structs 0072                 __pcstackCOMMON 0070          ??_seg_disp_47_get_val 0072  
           __size_of_decrement 0006          ??_seg_disp_47_set_val 0072                ?_vis_next_digit 0070  
       seg_disp_47_set_val@s_t 0074                 _OPTION_REGbits 0095               create_switch@s_t 0071  
               set_cat_val@val 0077                     __pbssBANK0 0020                   ?_rst_storage 0070  
           __size_of_increment 0006                __CFG_VCAPEN$OFF 0000         ??_on_interrupt_timer_0 0070  
     __end_of_update_int_flags 0469              ?_interruptHandler 0070               ?_update_switches 0070  
             ?_change_category 0070             ??_interruptHandler 0070                     __pmaintext 02A2  
                      ?___wmul 0070                   rst_storage@i 007C                     __pintentry 0004  
           __size_of_res_ports 000D               ??_seg_disp_47_on 0070   __end_of_init_interrupt_timer 0522  
           __size_of_set_ports 0007               ??_seg_disp_awake 0070                        _SSPCON1 0215  
            ??_eeprom_write_16 0073              __end_of_decrement 056A             _update_seg_disp_47 0535  
                    ?_init_i2c 0070     __size_of_init_oscillerator 0007            ?_update_seg_disp_47 0075  
         __size_of_set_cat_val 003C                __size_of___wmul 001B                        ___lwdiv 0365  
                      ___lwmod 0399          __end_of_create_switch 044D         __size_of_cat_auto_save 001C  
                   _init_ports 0574                        __ptext1 0017                        __ptext2 0190  
                      __ptext3 0558                        __ptext4 055E                        __ptext5 04CF  
                      __ptext6 056A                        __ptext7 0564                        __ptext8 04E4  
                      __ptext9 0252              __end_of_increment 0564                        _cur_cat 0036  
                      _cur_val 0032           ??_update_seg_disp_47 0077        __size_of_init_interrupt 0003  
         __end_of_init_structs 03F0                        clrloop0 0553           end_of_initialization 0014  
             update_switch@s_t 0079                     ??_init_i2c 0070              __end_of_res_ports 0516  
             update_switches@i 004E                      _INT_FLAGS 0037              __end_of_set_ports 054B  
  __size_of_create_seg_disp_47 0016                      _PORTBbits 000D                      _PORTCbits 000E  
             __CFG_FOSC$INTOSC 0000                  _seg_disp_save 002A                      _TRISBbits 008D  
                    _TRISCbits 008E            _extended_rst_streak 0030            vis_next_digit@sLATB 004A  
                _cat_auto_save 0469                  ??_get_cat_val 0079           _init_interrupt_timer 0516  
         __size_of_rst_storage 0010               ??_vis_next_digit 0044                 __end_of___wmul 04A0  
        __end_of_update_switch 01F3                    ?_init_ports 0070       __size_of_seg_disp_47_off 000A  
          start_initialization 000E        eeprom_write_16@slaveAdd 0074          create_seg_disp_47@s_t 0070  
               ?_cat_auto_save 0070             eeprom_write_16@add 0070          ?_init_interrupt_timer 0070  
  __end_of_seg_disp_47_get_val 0411              ?_update_int_flags 0070            update_switch@streak 0071  
      __size_of_eeprom_read_16 005F             ??_update_int_flags 007E    __end_of_seg_disp_47_set_val 04B9  
          __end_of_get_cat_val 02A2                       ??___wmul 0074      update_seg_disp_47@cur_val 0075  
    __size_of_interruptHandler 0009                _eeprom_write_16 02E7          __size_of_init_structs 002B  
        eeprom_write_16@eeData 0072          eeprom_write_16@addLow 0076                      ___latbits 0000  
                __pcstackBANK0 0044                 _init_interrupt 0577            __size_of_init_ports 0003  
                    __pnvBANK0 0052              __size_of_init_i2c 0009                      _decrement 0564  
__size_of_on_interrupt_timer_0 001F               ___lwdiv@dividend 0072                   _init_structs 03C5  
                     ?___lwdiv 0070                       ?___lwmod 0078       __size_of_update_switches 00C6  
     __size_of_change_category 0015         __end_of_init_interrupt 057A                      _increment 055E  
              ??_cat_auto_save 007B              ??_seg_disp_47_off 0070               ___lwdiv@quotient 0075  
       ??_init_interrupt_timer 0070                vis_next_digit@p 004B                 ___wmul@product 0074  
                  _get_cat_val 0252                  ??_set_cat_val 0079                      clear_ram0 0552  
                   ?_decrement 0070                      _res_ports 0509                       _PIR1bits 0011  
                    _set_ports 0544        __end_of_eeprom_write_16 0329              ___wmul@multiplier 0070  
              ?_init_interrupt 0070    __size_of_update_seg_disp_47 0008                     ?_increment 0070  
      __size_of_seg_disp_47_on 0007         __size_of_create_switch 001D                 _eeprom_read_16 01F3  
   __end_of_create_seg_disp_47 04CF        __size_of_seg_disp_awake 0006                     ?_res_ports 0070  
                   ?_set_ports 0070            __end_of_set_cat_val 0365               __size_of___lwdiv 0034  
             __size_of___lwmod 002C                   ??_init_ports 0070             seg_disp_47_off@s_t 0070  
             _interruptHandler 0004           get_cat_val@add_start 0044                   set_cat_val@i 0047  
            ??_update_switches 004B                       _ee_seq_4 003D       get_switch_toggle@old_s_t 0072  
     get_switch_toggle@new_s_t 0070           set_cat_val@add_start 0044                ___lwdiv@divisor 0070  
            ??_change_category 007C                ___lwdiv@counter 0077                       __ptext10 01F3  
                     __ptext11 0535                       __ptext20 0522                       __ptext12 04A0  
                     __ptext21 0469                       __ptext13 044D                       __ptext30 0544  
                     __ptext22 04F9                       __ptext14 00DD                       __ptext31 0509  
                     __ptext23 0329                       __ptext15 03F0                       __ptext32 054B  
                     __ptext24 02E7                       __ptext16 0485                       __ptext33 0577  
                     __ptext25 03C5                       __ptext17 0399                       __ptext34 0516  
                     __ptext26 0430                       __ptext18 0365                       __ptext35 052C  
                     __ptext27 04B9                       __ptext19 053D                       __ptext28 056F  
                     __ptext37 0411                       __ptext29 0574                  ??_rst_storage 007B  
            _get_switch_toggle 04CF                       _init_i2c 052C         __end_of_eeprom_read_16 0252  
            _get_switch_status 056A                  __size_of_main 0045                  __size_of_init 0005  
                     _old_btns 0020             __end_of_init_ports 0577             ?_get_switch_toggle 0070  
           ?_get_switch_status 0070                    ??_decrement 0070               ?_eeprom_write_16 0070  
                     int$flags 007E            ??_get_switch_toggle 0071            ??_get_switch_status 0070  
                     _rst_flag 0035              vis_next_digit@s_t 004E              vis_next_digit@val 0047  
                _create_switch 0430      __size_of_update_int_flags 001C                     _INTCONbits 000B  
            update_switch@sbtn 0070                    ??_increment 0070      __end_of_get_switch_toggle 04E4  
            seg_disp_47_on@s_t 0070      __end_of_get_switch_status 056F                       intlevel1 0000  
             ___lwmod@dividend 007A                ?_eeprom_read_16 0070         __size_of_update_switch 0063  
          get_cat_val@category 0046              __CFG_CLKOUTEN$OFF 0000                    _set_cat_val 0329  
          set_cat_val@category 0046                     _OSCCONbits 0099                    ??_res_ports 0070  
          __end_of_rst_storage 0509                    ??_set_ports 0070   __size_of_seg_disp_47_get_val 0021  
               ?_create_switch 0070                _seg_disp_47_off 0522   __size_of_seg_disp_47_set_val 0019  
  vis_next_digit@digit_divider 004C   __end_of_on_interrupt_timer_0 0430                ___lwmod@divisor 0078  
      __size_of_vis_next_digit 00B3                ___lwmod@counter 007D                    _SSPCON2bits 0216  
               _seg_disp_47_on 053D                   ?_get_cat_val 0077                 _seg_disp_awake 0558  
               _seg_disp_sleep 002C              eeprom_read_16@add 0070  
